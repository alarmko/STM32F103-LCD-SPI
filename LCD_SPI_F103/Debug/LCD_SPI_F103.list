
LCD_SPI_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003900  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c0d0  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fadc  0800fadc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800fadc  0800fadc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fadc  0800fadc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fadc  0800fadc  0001fadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fae0  0800fae0  0001fae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800fae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000088  0800fb6c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  0800fb6c  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008df2  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a08  00000000  00000000  00028ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0002a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f03  00000000  00000000  0002b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000820f  00000000  00000000  0003f4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ae65  00000000  00000000  0004770a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b256f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ecc  00000000  00000000  000b25c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080039f4 	.word	0x080039f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080039f4 	.word	0x080039f4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ILI9488_GetDirection>:
}RESIM;

extern RESIM T_RESIM[];

uint8_t ILI9488_GetDirection(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
	return Direction;
 8000160:	4b02      	ldr	r3, [pc, #8]	; (800016c <ILI9488_GetDirection+0x10>)
 8000162:	781b      	ldrb	r3, [r3, #0]
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a4 	.word	0x200000a4

08000170 <ILI9488_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9488_SPI_Send(unsigned char SPI_Data)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800017a:	1df9      	adds	r1, r7, #7
 800017c:	2301      	movs	r3, #1
 800017e:	2201      	movs	r2, #1
 8000180:	4803      	ldr	r0, [pc, #12]	; (8000190 <ILI9488_SPI_Send+0x20>)
 8000182:	f002 fb12 	bl	80027aa <HAL_SPI_Transmit>
}
 8000186:	bf00      	nop
 8000188:	3708      	adds	r7, #8
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	2000035c 	.word	0x2000035c

08000194 <ILI9488_Write_Command>:

/* Send command (char) to LCD */
void ILI9488_Write_Command(uint8_t Command)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800019e:	2200      	movs	r2, #0
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	480a      	ldr	r0, [pc, #40]	; (80001cc <ILI9488_Write_Command+0x38>)
 80001a4:	f001 fea0 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2101      	movs	r1, #1
 80001ac:	4808      	ldr	r0, [pc, #32]	; (80001d0 <ILI9488_Write_Command+0x3c>)
 80001ae:	f001 fe9b 	bl	8001ee8 <HAL_GPIO_WritePin>
	ILI9488_SPI_Send(Command);
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4618      	mov	r0, r3
 80001b6:	f7ff ffdb 	bl	8000170 <ILI9488_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2140      	movs	r1, #64	; 0x40
 80001be:	4803      	ldr	r0, [pc, #12]	; (80001cc <ILI9488_Write_Command+0x38>)
 80001c0:	f001 fe92 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 80001c4:	bf00      	nop
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010800 	.word	0x40010800
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <ILI9488_Write_Data>:

/* Send Data (char) to LCD */
void ILI9488_Write_Data(uint8_t Data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2101      	movs	r1, #1
 80001e2:	480a      	ldr	r0, [pc, #40]	; (800020c <ILI9488_Write_Data+0x38>)
 80001e4:	f001 fe80 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2140      	movs	r1, #64	; 0x40
 80001ec:	4808      	ldr	r0, [pc, #32]	; (8000210 <ILI9488_Write_Data+0x3c>)
 80001ee:	f001 fe7b 	bl	8001ee8 <HAL_GPIO_WritePin>
	ILI9488_SPI_Send(Data);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffbb 	bl	8000170 <ILI9488_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2140      	movs	r1, #64	; 0x40
 80001fe:	4804      	ldr	r0, [pc, #16]	; (8000210 <ILI9488_Write_Data+0x3c>)
 8000200:	f001 fe72 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010c00 	.word	0x40010c00
 8000210:	40010800 	.word	0x40010800

08000214 <ILI9488_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9488_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4604      	mov	r4, r0
 800021c:	4608      	mov	r0, r1
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	4623      	mov	r3, r4
 8000224:	80fb      	strh	r3, [r7, #6]
 8000226:	4603      	mov	r3, r0
 8000228:	80bb      	strh	r3, [r7, #4]
 800022a:	460b      	mov	r3, r1
 800022c:	807b      	strh	r3, [r7, #2]
 800022e:	4613      	mov	r3, r2
 8000230:	803b      	strh	r3, [r7, #0]
	ILI9488_Write_Command(0x2A);
 8000232:	202a      	movs	r0, #42	; 0x2a
 8000234:	f7ff ffae 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(X1 >> 8);
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	0a1b      	lsrs	r3, r3, #8
 800023c:	b29b      	uxth	r3, r3
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
 8000242:	f7ff ffc7 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(X1);
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ffc2 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(X2 >> 8);
 8000250:	887b      	ldrh	r3, [r7, #2]
 8000252:	0a1b      	lsrs	r3, r3, #8
 8000254:	b29b      	uxth	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ffbb 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(X2);
 800025e:	887b      	ldrh	r3, [r7, #2]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ffb6 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x2B);
 8000268:	202b      	movs	r0, #43	; 0x2b
 800026a:	f7ff ff93 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(Y1 >> 8);
 800026e:	88bb      	ldrh	r3, [r7, #4]
 8000270:	0a1b      	lsrs	r3, r3, #8
 8000272:	b29b      	uxth	r3, r3
 8000274:	b2db      	uxtb	r3, r3
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ffac 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(Y1);
 800027c:	88bb      	ldrh	r3, [r7, #4]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ffa7 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(Y2 >> 8);
 8000286:	883b      	ldrh	r3, [r7, #0]
 8000288:	0a1b      	lsrs	r3, r3, #8
 800028a:	b29b      	uxth	r3, r3
 800028c:	b2db      	uxtb	r3, r3
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ffa0 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(Y2);
 8000294:	883b      	ldrh	r3, [r7, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ff9b 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x2C);
 800029e:	202c      	movs	r0, #44	; 0x2c
 80002a0:	f7ff ff78 	bl	8000194 <ILI9488_Write_Command>
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd90      	pop	{r4, r7, pc}

080002ac <ILI9488_Reset>:

/*HARDWARE RESET*/
void ILI9488_Reset(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b6:	480d      	ldr	r0, [pc, #52]	; (80002ec <ILI9488_Reset+0x40>)
 80002b8:	f001 fe16 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80002bc:	2014      	movs	r0, #20
 80002be:	f001 fb87 	bl	80019d0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c8:	4808      	ldr	r0, [pc, #32]	; (80002ec <ILI9488_Reset+0x40>)
 80002ca:	f001 fe0d 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80002ce:	2064      	movs	r0, #100	; 0x64
 80002d0:	f001 fb7e 	bl	80019d0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002da:	4804      	ldr	r0, [pc, #16]	; (80002ec <ILI9488_Reset+0x40>)
 80002dc:	f001 fe04 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80002e0:	2064      	movs	r0, #100	; 0x64
 80002e2:	f001 fb75 	bl	80019d0 <HAL_Delay>
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010c00 	.word	0x40010c00

080002f0 <ILI9488_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9488_Set_Rotation(uint8_t Rotation)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
	Direction = Rotation;
 80002fa:	4a27      	ldr	r2, [pc, #156]	; (8000398 <ILI9488_Set_Rotation+0xa8>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	7013      	strb	r3, [r2, #0]

	ILI9488_Write_Command(0x36);
 8000300:	2036      	movs	r0, #54	; 0x36
 8000302:	f7ff ff47 	bl	8000194 <ILI9488_Write_Command>
	HAL_Delay(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f001 fb62 	bl	80019d0 <HAL_Delay>

	switch(Direction)
 800030c:	4b22      	ldr	r3, [pc, #136]	; (8000398 <ILI9488_Set_Rotation+0xa8>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d83b      	bhi.n	800038c <ILI9488_Set_Rotation+0x9c>
 8000314:	a201      	add	r2, pc, #4	; (adr r2, 800031c <ILI9488_Set_Rotation+0x2c>)
 8000316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031a:	bf00      	nop
 800031c:	0800032d 	.word	0x0800032d
 8000320:	08000345 	.word	0x08000345
 8000324:	0800035d 	.word	0x0800035d
 8000328:	08000375 	.word	0x08000375
	{
		case SCREEN_VERTICAL_1:
			ILI9488_Write_Data((1<<3));
 800032c:	2008      	movs	r0, #8
 800032e:	f7ff ff51 	bl	80001d4 <ILI9488_Write_Data>
			LCD_WIDTH = 320;
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <ILI9488_Set_Rotation+0xac>)
 8000334:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000338:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 480;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <ILI9488_Set_Rotation+0xb0>)
 800033c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000340:	801a      	strh	r2, [r3, #0]
			break;
 8000342:	e024      	b.n	800038e <ILI9488_Set_Rotation+0x9e>
		case SCREEN_HORIZONTAL_1:
			ILI9488_Write_Data((1<<6)|(1<<5)|(1<<4)|(1<<3));
 8000344:	2078      	movs	r0, #120	; 0x78
 8000346:	f7ff ff45 	bl	80001d4 <ILI9488_Write_Data>
			LCD_WIDTH  = 480;
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <ILI9488_Set_Rotation+0xac>)
 800034c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000350:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <ILI9488_Set_Rotation+0xb0>)
 8000354:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000358:	801a      	strh	r2, [r3, #0]
			break;
 800035a:	e018      	b.n	800038e <ILI9488_Set_Rotation+0x9e>
		case SCREEN_VERTICAL_2:
			ILI9488_Write_Data((1<<7)|(1<<6)|(1<<3));
 800035c:	20c8      	movs	r0, #200	; 0xc8
 800035e:	f7ff ff39 	bl	80001d4 <ILI9488_Write_Data>
			LCD_WIDTH  = 320;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <ILI9488_Set_Rotation+0xac>)
 8000364:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000368:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 480;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ILI9488_Set_Rotation+0xb0>)
 800036c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000370:	801a      	strh	r2, [r3, #0]
			break;
 8000372:	e00c      	b.n	800038e <ILI9488_Set_Rotation+0x9e>
		case SCREEN_HORIZONTAL_2:
			ILI9488_Write_Data((1<<7)|(1<<5)|(1<<3));
 8000374:	20a8      	movs	r0, #168	; 0xa8
 8000376:	f7ff ff2d 	bl	80001d4 <ILI9488_Write_Data>
			LCD_WIDTH  = 480;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <ILI9488_Set_Rotation+0xac>)
 800037c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000380:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <ILI9488_Set_Rotation+0xb0>)
 8000384:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000388:	801a      	strh	r2, [r3, #0]
			break;
 800038a:	e000      	b.n	800038e <ILI9488_Set_Rotation+0x9e>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800038c:	bf00      	nop
	}
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000a4 	.word	0x200000a4
 800039c:	20000002 	.word	0x20000002
 80003a0:	20000000 	.word	0x20000000

080003a4 <ILI9488_Init>:

void ILI9488_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	ILI9488_Reset();
 80003a8:	f7ff ff80 	bl	80002ac <ILI9488_Reset>

	//SOFTWARE RESET
	ILI9488_Write_Command(0x01);
 80003ac:	2001      	movs	r0, #1
 80003ae:	f7ff fef1 	bl	8000194 <ILI9488_Write_Command>
	HAL_Delay(100);
 80003b2:	2064      	movs	r0, #100	; 0x64
 80003b4:	f001 fb0c 	bl	80019d0 <HAL_Delay>

	ILI9488_Write_Command(0xF7);
 80003b8:	20f7      	movs	r0, #247	; 0xf7
 80003ba:	f7ff feeb 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0xA9);
 80003be:	20a9      	movs	r0, #169	; 0xa9
 80003c0:	f7ff ff08 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x51);
 80003c4:	2051      	movs	r0, #81	; 0x51
 80003c6:	f7ff ff05 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x2C);
 80003ca:	202c      	movs	r0, #44	; 0x2c
 80003cc:	f7ff ff02 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x82);
 80003d0:	2082      	movs	r0, #130	; 0x82
 80003d2:	f7ff feff 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xC0);
 80003d6:	20c0      	movs	r0, #192	; 0xc0
 80003d8:	f7ff fedc 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x11);
 80003dc:	2011      	movs	r0, #17
 80003de:	f7ff fef9 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x09);
 80003e2:	2009      	movs	r0, #9
 80003e4:	f7ff fef6 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xC1);
 80003e8:	20c1      	movs	r0, #193	; 0xc1
 80003ea:	f7ff fed3 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x41);
 80003ee:	2041      	movs	r0, #65	; 0x41
 80003f0:	f7ff fef0 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xC5);
 80003f4:	20c5      	movs	r0, #197	; 0xc5
 80003f6:	f7ff fecd 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);
 80003fa:	2000      	movs	r0, #0
 80003fc:	f7ff feea 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0A);
 8000400:	200a      	movs	r0, #10
 8000402:	f7ff fee7 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x80);
 8000406:	2080      	movs	r0, #128	; 0x80
 8000408:	f7ff fee4 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xB1);
 800040c:	20b1      	movs	r0, #177	; 0xb1
 800040e:	f7ff fec1 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0xB0);
 8000412:	20b0      	movs	r0, #176	; 0xb0
 8000414:	f7ff fede 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x11);
 8000418:	2011      	movs	r0, #17
 800041a:	f7ff fedb 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xB4);
 800041e:	20b4      	movs	r0, #180	; 0xb4
 8000420:	f7ff feb8 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x02);
 8000424:	2002      	movs	r0, #2
 8000426:	f7ff fed5 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xB6);
 800042a:	20b6      	movs	r0, #182	; 0xb6
 800042c:	f7ff feb2 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x02);
 8000430:	2002      	movs	r0, #2
 8000432:	f7ff fecf 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x42);
 8000436:	2042      	movs	r0, #66	; 0x42
 8000438:	f7ff fecc 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xB7);
 800043c:	20b7      	movs	r0, #183	; 0xb7
 800043e:	f7ff fea9 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0xC6);
 8000442:	20c6      	movs	r0, #198	; 0xc6
 8000444:	f7ff fec6 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xBE);
 8000448:	20be      	movs	r0, #190	; 0xbe
 800044a:	f7ff fea3 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);
 800044e:	2000      	movs	r0, #0
 8000450:	f7ff fec0 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x04);
 8000454:	2004      	movs	r0, #4
 8000456:	f7ff febd 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0xE9);
 800045a:	20e9      	movs	r0, #233	; 0xe9
 800045c:	f7ff fe9a 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff feb7 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x36);
 8000466:	2036      	movs	r0, #54	; 0x36
 8000468:	f7ff fe94 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data((1<<3)|(0<<7)|(1<<6)|(1<<5));
 800046c:	2068      	movs	r0, #104	; 0x68
 800046e:	f7ff feb1 	bl	80001d4 <ILI9488_Write_Data>

	ILI9488_Write_Command(0x3A);
 8000472:	203a      	movs	r0, #58	; 0x3a
 8000474:	f7ff fe8e 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x66);  //24 BIT COZUNURLUK ICIN
 8000478:	2066      	movs	r0, #102	; 0x66
 800047a:	f7ff feab 	bl	80001d4 <ILI9488_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9488_Write_Command(0xE0);
 800047e:	20e0      	movs	r0, #224	; 0xe0
 8000480:	f7ff fe88 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff fea5 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x07);
 800048a:	2007      	movs	r0, #7
 800048c:	f7ff fea2 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0f);
 8000490:	200f      	movs	r0, #15
 8000492:	f7ff fe9f 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0D);
 8000496:	200d      	movs	r0, #13
 8000498:	f7ff fe9c 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x1B);
 800049c:	201b      	movs	r0, #27
 800049e:	f7ff fe99 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0A);
 80004a2:	200a      	movs	r0, #10
 80004a4:	f7ff fe96 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x3c);
 80004a8:	203c      	movs	r0, #60	; 0x3c
 80004aa:	f7ff fe93 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x78);
 80004ae:	2078      	movs	r0, #120	; 0x78
 80004b0:	f7ff fe90 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x4A);
 80004b4:	204a      	movs	r0, #74	; 0x4a
 80004b6:	f7ff fe8d 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x07);
 80004ba:	2007      	movs	r0, #7
 80004bc:	f7ff fe8a 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0E);
 80004c0:	200e      	movs	r0, #14
 80004c2:	f7ff fe87 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x09);
 80004c6:	2009      	movs	r0, #9
 80004c8:	f7ff fe84 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x1B);
 80004cc:	201b      	movs	r0, #27
 80004ce:	f7ff fe81 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x1e);
 80004d2:	201e      	movs	r0, #30
 80004d4:	f7ff fe7e 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0f);
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff fe7b 	bl	80001d4 <ILI9488_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9488_Write_Command(0xE1);
 80004de:	20e1      	movs	r0, #225	; 0xe1
 80004e0:	f7ff fe58 	bl	8000194 <ILI9488_Write_Command>
	ILI9488_Write_Data(0x00);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff fe75 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x22);
 80004ea:	2022      	movs	r0, #34	; 0x22
 80004ec:	f7ff fe72 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x24);
 80004f0:	2024      	movs	r0, #36	; 0x24
 80004f2:	f7ff fe6f 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x06);
 80004f6:	2006      	movs	r0, #6
 80004f8:	f7ff fe6c 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x12);
 80004fc:	2012      	movs	r0, #18
 80004fe:	f7ff fe69 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x07);
 8000502:	2007      	movs	r0, #7
 8000504:	f7ff fe66 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x36);
 8000508:	2036      	movs	r0, #54	; 0x36
 800050a:	f7ff fe63 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x47);
 800050e:	2047      	movs	r0, #71	; 0x47
 8000510:	f7ff fe60 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x47);
 8000514:	2047      	movs	r0, #71	; 0x47
 8000516:	f7ff fe5d 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x06);
 800051a:	2006      	movs	r0, #6
 800051c:	f7ff fe5a 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0a);
 8000520:	200a      	movs	r0, #10
 8000522:	f7ff fe57 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x07);
 8000526:	2007      	movs	r0, #7
 8000528:	f7ff fe54 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x30);
 800052c:	2030      	movs	r0, #48	; 0x30
 800052e:	f7ff fe51 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x37);
 8000532:	2037      	movs	r0, #55	; 0x37
 8000534:	f7ff fe4e 	bl	80001d4 <ILI9488_Write_Data>
	ILI9488_Write_Data(0x0f);
 8000538:	200f      	movs	r0, #15
 800053a:	f7ff fe4b 	bl	80001d4 <ILI9488_Write_Data>

	//EXIT SLEEP
	ILI9488_Write_Command(0x11);
 800053e:	2011      	movs	r0, #17
 8000540:	f7ff fe28 	bl	8000194 <ILI9488_Write_Command>
	HAL_Delay(120);
 8000544:	2078      	movs	r0, #120	; 0x78
 8000546:	f001 fa43 	bl	80019d0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9488_Write_Command(0x29);
 800054a:	2029      	movs	r0, #41	; 0x29
 800054c:	f7ff fe22 	bl	8000194 <ILI9488_Write_Command>

	//STARTING ROTATION
	ILI9488_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000550:	2001      	movs	r0, #1
 8000552:	f7ff fecd 	bl	80002f0 <ILI9488_Set_Rotation>
	//ILI9488_Set_Rotation(SCREEN_VERTICAL_1);
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <ILI9488_Draw_Colour>:

//INTERNAL FUNCTION OF LIBRARY, USAGE NOT RECOMENDED, USE Draw_Pixel INSTEAD
/*Sends single pixel colour information to LCD*/

void ILI9488_Draw_Colour(uint16_t Colour)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
//SENDS COLOUR
	unsigned char TempBuffer[3] = {(Colour>>8)&0xF8, (Colour>>3)&0xFC, Colour<<3};
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	0a1b      	lsrs	r3, r3, #8
 800056a:	b29b      	uxth	r3, r3
 800056c:	b2db      	uxtb	r3, r3
 800056e:	f023 0307 	bic.w	r3, r3, #7
 8000572:	b2db      	uxtb	r3, r3
 8000574:	733b      	strb	r3, [r7, #12]
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	b29b      	uxth	r3, r3
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f023 0303 	bic.w	r3, r3, #3
 8000582:	b2db      	uxtb	r3, r3
 8000584:	737b      	strb	r3, [r7, #13]
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <ILI9488_Draw_Colour+0x68>)
 8000596:	f001 fca7 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2140      	movs	r1, #64	; 0x40
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <ILI9488_Draw_Colour+0x6c>)
 80005a0:	f001 fca2 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(HSPI_INSTANCE, TempBuffer, 3, 1);
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	2301      	movs	r3, #1
 80005aa:	2203      	movs	r2, #3
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <ILI9488_Draw_Colour+0x70>)
 80005ae:	f002 f8fc 	bl	80027aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <ILI9488_Draw_Colour+0x6c>)
 80005b8:	f001 fc96 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010c00 	.word	0x40010c00
 80005c8:	40010800 	.word	0x40010800
 80005cc:	2000035c 	.word	0x2000035c

080005d0 <ILI9488_Draw_Colour_Burst_18BIT>:

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9488_Draw_Colour_Burst_18BIT(uint16_t Colour, uint32_t Size)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	80fb      	strh	r3, [r7, #6]
 80005dc:	466b      	mov	r3, sp
 80005de:	461d      	mov	r5, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24

	if((Size * 3) < BURST_MAX_SIZE)
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	4613      	mov	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80005f0:	d202      	bcs.n	80005f8 <ILI9488_Draw_Colour_Burst_18BIT+0x28>
	{
		Buffer_Size = Size;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
 80005f6:	e002      	b.n	80005fe <ILI9488_Draw_Colour_Burst_18BIT+0x2e>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 80005f8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2101      	movs	r1, #1
 8000602:	4849      	ldr	r0, [pc, #292]	; (8000728 <ILI9488_Draw_Colour_Burst_18BIT+0x158>)
 8000604:	f001 fc70 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	4847      	ldr	r0, [pc, #284]	; (800072c <ILI9488_Draw_Colour_Burst_18BIT+0x15c>)
 800060e:	f001 fc6b 	bl	8001ee8 <HAL_GPIO_WritePin>

	unsigned char Byte1 = (Colour>>8)&0xF8;	//RED
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	b29b      	uxth	r3, r3
 8000618:	b2db      	uxtb	r3, r3
 800061a:	f023 0307 	bic.w	r3, r3, #7
 800061e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char Byte2 = (Colour>>3)&0xFC;	//GREEN
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	08db      	lsrs	r3, r3, #3
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f023 0303 	bic.w	r3, r3, #3
 800062e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	unsigned char Byte3 = (Colour<<3);			//BLUE
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 800063c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800063e:	4623      	mov	r3, r4
 8000640:	3b01      	subs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
 8000644:	4620      	mov	r0, r4
 8000646:	f04f 0100 	mov.w	r1, #0
 800064a:	f04f 0200 	mov.w	r2, #0
 800064e:	f04f 0300 	mov.w	r3, #0
 8000652:	00cb      	lsls	r3, r1, #3
 8000654:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000658:	00c2      	lsls	r2, r0, #3
 800065a:	4620      	mov	r0, r4
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	f04f 0200 	mov.w	r2, #0
 8000664:	f04f 0300 	mov.w	r3, #0
 8000668:	00cb      	lsls	r3, r1, #3
 800066a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800066e:	00c2      	lsls	r2, r0, #3
 8000670:	1de3      	adds	r3, r4, #7
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	ebad 0d03 	sub.w	sp, sp, r3
 800067a:	466b      	mov	r3, sp
 800067c:	3300      	adds	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < Buffer_Size; j+=3)
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
 8000684:	e014      	b.n	80006b0 <ILI9488_Draw_Colour_Burst_18BIT+0xe0>
		{
			burst_buffer[j] = 	Byte1;
 8000686:	69ba      	ldr	r2, [r7, #24]
 8000688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800068a:	4413      	add	r3, r2
 800068c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000690:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = Byte2;
 8000692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000694:	3301      	adds	r3, #1
 8000696:	69ba      	ldr	r2, [r7, #24]
 8000698:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800069c:	54d1      	strb	r1, [r2, r3]
			burst_buffer[j+2] = Byte3;
 800069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a0:	3302      	adds	r3, #2
 80006a2:	69ba      	ldr	r2, [r7, #24]
 80006a4:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80006a8:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < Buffer_Size; j+=3)
 80006aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ac:	3303      	adds	r3, #3
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80006b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d3e6      	bcc.n	8000686 <ILI9488_Draw_Colour_Burst_18BIT+0xb6>
		}
	
	uint32_t Sending_Size = Size * 3;
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	4613      	mov	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4413      	add	r3, r2
 80006c0:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80006d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006d6:	fb01 f202 	mul.w	r2, r1, r2
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]

	if(Sending_in_Block != 0)
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d010      	beq.n	8000706 <ILI9488_Draw_Colour_Burst_18BIT+0x136>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e8:	e009      	b.n	80006fe <ILI9488_Draw_Colour_Burst_18BIT+0x12e>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 80006ea:	69b9      	ldr	r1, [r7, #24]
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	230a      	movs	r3, #10
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <ILI9488_Draw_Colour_Burst_18BIT+0x160>)
 80006f4:	f002 f859 	bl	80027aa <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80006f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fa:	3301      	adds	r3, #1
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	429a      	cmp	r2, r3
 8000704:	d3f1      	bcc.n	80006ea <ILI9488_Draw_Colour_Burst_18BIT+0x11a>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8000706:	69b9      	ldr	r1, [r7, #24]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	b29a      	uxth	r2, r3
 800070c:	230a      	movs	r3, #10
 800070e:	4808      	ldr	r0, [pc, #32]	; (8000730 <ILI9488_Draw_Colour_Burst_18BIT+0x160>)
 8000710:	f002 f84b 	bl	80027aa <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <ILI9488_Draw_Colour_Burst_18BIT+0x15c>)
 800071a:	f001 fbe5 	bl	8001ee8 <HAL_GPIO_WritePin>
 800071e:	46ad      	mov	sp, r5
}
 8000720:	bf00      	nop
 8000722:	3730      	adds	r7, #48	; 0x30
 8000724:	46bd      	mov	sp, r7
 8000726:	bdb0      	pop	{r4, r5, r7, pc}
 8000728:	40010c00 	.word	0x40010c00
 800072c:	40010800 	.word	0x40010800
 8000730:	2000035c 	.word	0x2000035c

08000734 <ILI9488_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9488_Fill_Screen(uint16_t Colour)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
	ILI9488_Set_Address(0,0,LCD_WIDTH-1,LCD_HEIGHT-1);
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <ILI9488_Fill_Screen+0x4c>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	3b01      	subs	r3, #1
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <ILI9488_Fill_Screen+0x50>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
 800074e:	3b01      	subs	r3, #1
 8000750:	b29b      	uxth	r3, r3
 8000752:	2100      	movs	r1, #0
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff fd5d 	bl	8000214 <ILI9488_Set_Address>
	ILI9488_Draw_Colour_Burst_18BIT(Colour, LCD_WIDTH * LCD_HEIGHT);
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <ILI9488_Fill_Screen+0x4c>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b29b      	uxth	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <ILI9488_Fill_Screen+0x50>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	fb03 f302 	mul.w	r3, r3, r2
 800076c:	461a      	mov	r2, r3
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff2c 	bl	80005d0 <ILI9488_Draw_Colour_Burst_18BIT>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000002 	.word	0x20000002
 8000784:	20000000 	.word	0x20000000

08000788 <ILI9488_LCD_Font>:
  }
}


void ILI9488_LCD_Font(uint16_t x, uint16_t y, char *text, const char *p_font,
	uint32_t backcolor, uint32_t color565) {
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08b      	sub	sp, #44	; 0x2c
 800078c:	af00      	add	r7, sp, #0
 800078e:	60ba      	str	r2, [r7, #8]
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4603      	mov	r3, r0
 8000794:	81fb      	strh	r3, [r7, #14]
 8000796:	460b      	mov	r3, r1
 8000798:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t cursor_y = y;
 800079e:	89bb      	ldrh	r3, [r7, #12]
 80007a0:	833b      	strh	r3, [r7, #24]
	uint8_t karekter_start = p_font[2];
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3302      	adds	r3, #2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	75fb      	strb	r3, [r7, #23]
	uint8_t karekter_end = p_font[4];
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3304      	adds	r3, #4
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	75bb      	strb	r3, [r7, #22]
	uint8_t satir_sayisi = p_font[6];
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3306      	adds	r3, #6
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	757b      	strb	r3, [r7, #21]
	uint16_t i,ii;


uint32_t Data;

	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	837b      	strh	r3, [r7, #26]
 80007be:	e0ab      	b.n	8000918 <ILI9488_LCD_Font+0x190>
		char c = text[text_pos];
 80007c0:	8b7b      	ldrh	r3, [r7, #26]
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	753b      	strb	r3, [r7, #20]
		if (c == '\n') {
 80007ca:	7d3b      	ldrb	r3, [r7, #20]
 80007cc:	2b0a      	cmp	r3, #10
 80007ce:	d102      	bne.n	80007d6 <ILI9488_LCD_Font+0x4e>
			cursor_x = x;
 80007d0:	89fb      	ldrh	r3, [r7, #14]
 80007d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80007d4:	e09d      	b.n	8000912 <ILI9488_LCD_Font+0x18a>
		} else if (c >= karekter_start && c <= karekter_end && c != '\n') {
 80007d6:	7d3a      	ldrb	r2, [r7, #20]
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	429a      	cmp	r2, r3
 80007dc:	f0c0 8099 	bcc.w	8000912 <ILI9488_LCD_Font+0x18a>
 80007e0:	7d3a      	ldrb	r2, [r7, #20]
 80007e2:	7dbb      	ldrb	r3, [r7, #22]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	f200 8094 	bhi.w	8000912 <ILI9488_LCD_Font+0x18a>
 80007ea:	7d3b      	ldrb	r3, [r7, #20]
 80007ec:	2b0a      	cmp	r3, #10
 80007ee:	f000 8090 	beq.w	8000912 <ILI9488_LCD_Font+0x18a>
			sutun_sayisi = p_font[(c - karekter_start) * 4 + 8];
 80007f2:	7d3a      	ldrb	r2, [r7, #20]
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	3308      	adds	r3, #8
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	74fb      	strb	r3, [r7, #19]
			ILI9488_Set_Address(cursor_x, cursor_y, cursor_x + sutun_sayisi-1,cursor_y + satir_sayisi);
 8000804:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000806:	8b39      	ldrh	r1, [r7, #24]
 8000808:	7cfb      	ldrb	r3, [r7, #19]
 800080a:	b29a      	uxth	r2, r3
 800080c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800080e:	4413      	add	r3, r2
 8000810:	b29b      	uxth	r3, r3
 8000812:	3b01      	subs	r3, #1
 8000814:	b29c      	uxth	r4, r3
 8000816:	7d7b      	ldrb	r3, [r7, #21]
 8000818:	b29a      	uxth	r2, r3
 800081a:	8b3b      	ldrh	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	b29b      	uxth	r3, r3
 8000820:	4622      	mov	r2, r4
 8000822:	f7ff fcf7 	bl	8000214 <ILI9488_Set_Address>
			karekter_adresi = p_font[(c - karekter_start) * 4 + 9]+ p_font[(c - karekter_start) * 4 + 10] * 256;
 8000826:	7d3a      	ldrb	r2, [r7, #20]
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	3309      	adds	r3, #9
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b29a      	uxth	r2, r3
 8000838:	7d39      	ldrb	r1, [r7, #20]
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	330a      	adds	r3, #10
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	440b      	add	r3, r1
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b29b      	uxth	r3, r3
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b29b      	uxth	r3, r3
 800084e:	4413      	add	r3, r2
 8000850:	84bb      	strh	r3, [r7, #36]	; 0x24
			for (i = 0; i < satir_sayisi; i++) {
 8000852:	2300      	movs	r3, #0
 8000854:	847b      	strh	r3, [r7, #34]	; 0x22
 8000856:	e051      	b.n	80008fc <ILI9488_LCD_Font+0x174>
				Data = p_font[karekter_adresi+3] << 24 | p_font[karekter_adresi+2] << 16 |p_font[karekter_adresi+1] << 8 | p_font[karekter_adresi];
 8000858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800085a:	3303      	adds	r3, #3
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	061a      	lsls	r2, r3, #24
 8000864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000866:	3302      	adds	r3, #2
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	440b      	add	r3, r1
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	041b      	lsls	r3, r3, #16
 8000870:	431a      	orrs	r2, r3
 8000872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000874:	3301      	adds	r3, #1
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	440b      	add	r3, r1
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	4313      	orrs	r3, r2
 8000880:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	440a      	add	r2, r1
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	4313      	orrs	r3, r2
 800088a:	61fb      	str	r3, [r7, #28]

				if((sutun_sayisi%8) == 0){
 800088c:	7cfb      	ldrb	r3, [r7, #19]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d107      	bne.n	80008a8 <ILI9488_LCD_Font+0x120>
					karekter_adresi +=sutun_sayisi/8;
 8000898:	7cfb      	ldrb	r3, [r7, #19]
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	b29a      	uxth	r2, r3
 80008a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008a2:	4413      	add	r3, r2
 80008a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80008a6:	e008      	b.n	80008ba <ILI9488_LCD_Font+0x132>
				}else{
					karekter_adresi +=sutun_sayisi/8 +1;
 80008a8:	7cfb      	ldrb	r3, [r7, #19]
 80008aa:	08db      	lsrs	r3, r3, #3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008b2:	4413      	add	r3, r2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	84bb      	strh	r3, [r7, #36]	; 0x24
				}

				for (ii = 0; ii < sutun_sayisi; ii++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	843b      	strh	r3, [r7, #32]
 80008be:	e015      	b.n	80008ec <ILI9488_LCD_Font+0x164>
					if (Data & 0x000001)
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d005      	beq.n	80008d6 <ILI9488_LCD_Font+0x14e>
						ILI9488_Draw_Colour(color565);
 80008ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe44 	bl	800055c <ILI9488_Draw_Colour>
 80008d4:	e004      	b.n	80008e0 <ILI9488_LCD_Font+0x158>
					else //karekterin background resmi basiliyor
					{

						ILI9488_Draw_Colour(backcolor);
 80008d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d8:	b29b      	uxth	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe3e 	bl	800055c <ILI9488_Draw_Colour>
					}

					Data = Data >> 1;
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	085b      	lsrs	r3, r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
				for (ii = 0; ii < sutun_sayisi; ii++) {
 80008e6:	8c3b      	ldrh	r3, [r7, #32]
 80008e8:	3301      	adds	r3, #1
 80008ea:	843b      	strh	r3, [r7, #32]
 80008ec:	7cfb      	ldrb	r3, [r7, #19]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	8c3a      	ldrh	r2, [r7, #32]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3e4      	bcc.n	80008c0 <ILI9488_LCD_Font+0x138>
			for (i = 0; i < satir_sayisi; i++) {
 80008f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008f8:	3301      	adds	r3, #1
 80008fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80008fc:	7d7b      	ldrb	r3, [r7, #21]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000902:	429a      	cmp	r2, r3
 8000904:	d3a8      	bcc.n	8000858 <ILI9488_LCD_Font+0xd0>

				}
			}

			cursor_x += sutun_sayisi;
 8000906:	7cfb      	ldrb	r3, [r7, #19]
 8000908:	b29a      	uxth	r2, r3
 800090a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800090c:	4413      	add	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++) {
 8000912:	8b7b      	ldrh	r3, [r7, #26]
 8000914:	3301      	adds	r3, #1
 8000916:	837b      	strh	r3, [r7, #26]
 8000918:	8b7c      	ldrh	r4, [r7, #26]
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	f7ff fc16 	bl	800014c <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	429c      	cmp	r4, r3
 8000924:	f4ff af4c 	bcc.w	80007c0 <ILI9488_LCD_Font+0x38>
		}
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	372c      	adds	r7, #44	; 0x2c
 800092e:	46bd      	mov	sp, r7
 8000930:	bd90      	pop	{r4, r7, pc}
	...

08000934 <ILI9488_LCD_RESIM>:
//void ILI9488_LCD_RESIM(uint16_t x, uint16_t y,char *p_font,char renk){
void ILI9488_LCD_RESIM(uint8_t kor_secim,char *p_resimadi,char renk){
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	f6ad 1d84 	subw	sp, sp, #2436	; 0x984
 800093a:	af00      	add	r7, sp, #0
 800093c:	463b      	mov	r3, r7
 800093e:	6019      	str	r1, [r3, #0]
 8000940:	4611      	mov	r1, r2
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	4602      	mov	r2, r0
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	1dbb      	adds	r3, r7, #6
 800094a:	460a      	mov	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
	uint16_t Colour;
	uint32_t Top_Adet;
	uint8_t w=(p_resimadi[2]*256+p_resimadi[3]);
 800094e:	463b      	mov	r3, r7
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3303      	adds	r3, #3
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	f887 3977 	strb.w	r3, [r7, #2423]	; 0x977
	uint8_t h = (p_resimadi[4]*256+p_resimadi[5]);
 800095a:	463b      	mov	r3, r7
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3305      	adds	r3, #5
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f887 3976 	strb.w	r3, [r7, #2422]	; 0x976
    uint16_t x=T_RESIM[kor_secim].resim_korx;
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <ILI9488_LCD_RESIM+0x224>)
 800096c:	011b      	lsls	r3, r3, #4
 800096e:	4413      	add	r3, r2
 8000970:	3304      	adds	r3, #4
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	f8a7 3974 	strh.w	r3, [r7, #2420]	; 0x974
    uint16_t y=T_RESIM[kor_secim].resim_kory;
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4a76      	ldr	r2, [pc, #472]	; (8000b58 <ILI9488_LCD_RESIM+0x224>)
 800097e:	011b      	lsls	r3, r3, #4
 8000980:	4413      	add	r3, r2
 8000982:	3306      	adds	r3, #6
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	f8a7 3972 	strh.w	r3, [r7, #2418]	; 0x972
    T_RESIM[kor_secim].resim_w=w;
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f897 2977 	ldrb.w	r2, [r7, #2423]	; 0x977
 8000992:	b291      	uxth	r1, r2
 8000994:	4a70      	ldr	r2, [pc, #448]	; (8000b58 <ILI9488_LCD_RESIM+0x224>)
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4413      	add	r3, r2
 800099a:	3308      	adds	r3, #8
 800099c:	460a      	mov	r2, r1
 800099e:	801a      	strh	r2, [r3, #0]
    T_RESIM[kor_secim].resim_h=h;
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f897 2976 	ldrb.w	r2, [r7, #2422]	; 0x976
 80009a8:	b291      	uxth	r1, r2
 80009aa:	4a6b      	ldr	r2, [pc, #428]	; (8000b58 <ILI9488_LCD_RESIM+0x224>)
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	4413      	add	r3, r2
 80009b0:	330a      	adds	r3, #10
 80009b2:	460a      	mov	r2, r1
 80009b4:	801a      	strh	r2, [r3, #0]
	ILI9488_Set_Address(x,y,(x+w-1),(y+h-1));
 80009b6:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	f8b7 3974 	ldrh.w	r3, [r7, #2420]	; 0x974
 80009c0:	4413      	add	r3, r2
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	3b01      	subs	r3, #1
 80009c6:	b29c      	uxth	r4, r3
 80009c8:	f897 3976 	ldrb.w	r3, [r7, #2422]	; 0x976
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	f8b7 3972 	ldrh.w	r3, [r7, #2418]	; 0x972
 80009d2:	4413      	add	r3, r2
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	3b01      	subs	r3, #1
 80009d8:	b29b      	uxth	r3, r3
 80009da:	f8b7 1972 	ldrh.w	r1, [r7, #2418]	; 0x972
 80009de:	f8b7 0974 	ldrh.w	r0, [r7, #2420]	; 0x974
 80009e2:	4622      	mov	r2, r4
 80009e4:	f7ff fc16 	bl	8000214 <ILI9488_Set_Address>

	Top_Adet=w*h*2;
 80009e8:	f897 3977 	ldrb.w	r3, [r7, #2423]	; 0x977
 80009ec:	f897 2976 	ldrb.w	r2, [r7, #2422]	; 0x976
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
	unsigned char burst_buffer[BURST_MAX_SIZE];


	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2101      	movs	r1, #1
 80009fe:	4857      	ldr	r0, [pc, #348]	; (8000b5c <ILI9488_LCD_RESIM+0x228>)
 8000a00:	f001 fa72 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	4855      	ldr	r0, [pc, #340]	; (8000b60 <ILI9488_LCD_RESIM+0x22c>)
 8000a0a:	f001 fa6d 	bl	8001ee8 <HAL_GPIO_WritePin>

	uint16_t adet=0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8a7 397e 	strh.w	r3, [r7, #2430]	; 0x97e

	char temp;

	for(uint32_t j = 0; j < Top_Adet; j+=2)
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 8000a1a:	e082      	b.n	8000b22 <ILI9488_LCD_RESIM+0x1ee>
		{
		    Colour=p_resimadi[j+8];
 8000a1c:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8000a20:	3308      	adds	r3, #8
 8000a22:	463a      	mov	r2, r7
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f8a7 396a 	strh.w	r3, [r7, #2410]	; 0x96a
			Colour=Colour << 8 | p_resimadi[j+9];
 8000a2e:	f8b7 396a 	ldrh.w	r3, [r7, #2410]	; 0x96a
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	b21a      	sxth	r2, r3
 8000a36:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8000a3a:	3309      	adds	r3, #9
 8000a3c:	4639      	mov	r1, r7
 8000a3e:	6809      	ldr	r1, [r1, #0]
 8000a40:	440b      	add	r3, r1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	f8a7 396a 	strh.w	r3, [r7, #2410]	; 0x96a

			burst_buffer[adet] = (Colour>>8) & 0xF8;	//RED
 8000a4e:	f8b7 396a 	ldrh.w	r3, [r7, #2410]	; 0x96a
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000a5c:	f022 0207 	bic.w	r2, r2, #7
 8000a60:	b2d1      	uxtb	r1, r2
 8000a62:	f107 0208 	add.w	r2, r7, #8
 8000a66:	54d1      	strb	r1, [r2, r3]

			adet++;
 8000a68:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f8a7 397e 	strh.w	r3, [r7, #2430]	; 0x97e
			burst_buffer[adet] = (Colour>>3) & 0xFC;   //GREEN
 8000a72:	f8b7 396a 	ldrh.w	r3, [r7, #2410]	; 0x96a
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000a80:	f022 0203 	bic.w	r2, r2, #3
 8000a84:	b2d1      	uxtb	r1, r2
 8000a86:	f107 0208 	add.w	r2, r7, #8
 8000a8a:	54d1      	strb	r1, [r2, r3]


			adet++;
 8000a8c:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000a90:	3301      	adds	r3, #1
 8000a92:	f8a7 397e 	strh.w	r3, [r7, #2430]	; 0x97e
			burst_buffer[adet] = (Colour<<3);		   //BLUE
 8000a96:	f8b7 396a 	ldrh.w	r3, [r7, #2410]	; 0x96a
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	b2d1      	uxtb	r1, r2
 8000aa4:	f107 0208 	add.w	r2, r7, #8
 8000aa8:	54d1      	strb	r1, [r2, r3]


			if(renk >0){ //tusa basıldımı yesille kırmızı yer degiştiriyor
 8000aaa:	1dbb      	adds	r3, r7, #6
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d01b      	beq.n	8000aea <ILI9488_LCD_RESIM+0x1b6>
			temp=burst_buffer[adet-1];
 8000ab2:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f107 0208 	add.w	r2, r7, #8
 8000abc:	5cd3      	ldrb	r3, [r2, r3]
 8000abe:	f887 3969 	strb.w	r3, [r7, #2409]	; 0x969
			burst_buffer[adet-1]=burst_buffer[adet-2];
 8000ac2:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000ac6:	1e9a      	subs	r2, r3, #2
 8000ac8:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000acc:	3b01      	subs	r3, #1
 8000ace:	f107 0108 	add.w	r1, r7, #8
 8000ad2:	5c89      	ldrb	r1, [r1, r2]
 8000ad4:	f107 0208 	add.w	r2, r7, #8
 8000ad8:	54d1      	strb	r1, [r2, r3]
			burst_buffer[adet-2]=temp;
 8000ada:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000ade:	3b02      	subs	r3, #2
 8000ae0:	f107 0208 	add.w	r2, r7, #8
 8000ae4:	f897 1969 	ldrb.w	r1, [r7, #2409]	; 0x969
 8000ae8:	54d1      	strb	r1, [r2, r3]
			}
			adet++;
 8000aea:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000aee:	3301      	adds	r3, #1
 8000af0:	f8a7 397e 	strh.w	r3, [r7, #2430]	; 0x97e
			if(adet >= BURST_MAX_SIZE-1){
 8000af4:	f8b7 397e 	ldrh.w	r3, [r7, #2430]	; 0x97e
 8000af8:	f640 125e 	movw	r2, #2398	; 0x95e
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d90b      	bls.n	8000b18 <ILI9488_LCD_RESIM+0x1e4>
				HAL_SPI_Transmit(HSPI_INSTANCE,burst_buffer, BURST_MAX_SIZE, 10000);
 8000b00:	f107 0108 	add.w	r1, r7, #8
 8000b04:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b08:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000b0c:	4815      	ldr	r0, [pc, #84]	; (8000b64 <ILI9488_LCD_RESIM+0x230>)
 8000b0e:	f001 fe4c 	bl	80027aa <HAL_SPI_Transmit>
				adet=0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8a7 397e 	strh.w	r3, [r7, #2430]	; 0x97e
	for(uint32_t j = 0; j < Top_Adet; j+=2)
 8000b18:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
 8000b22:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 8000b26:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	f4ff af76 	bcc.w	8000a1c <ILI9488_LCD_RESIM+0xe8>
			}

		}
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, adet, 1000);
 8000b30:	f8b7 297e 	ldrh.w	r2, [r7, #2430]	; 0x97e
 8000b34:	f107 0108 	add.w	r1, r7, #8
 8000b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <ILI9488_LCD_RESIM+0x230>)
 8000b3e:	f001 fe34 	bl	80027aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <ILI9488_LCD_RESIM+0x22c>)
 8000b48:	f001 f9ce 	bl	8001ee8 <HAL_GPIO_WritePin>


}
 8000b4c:	bf00      	nop
 8000b4e:	f607 1784 	addw	r7, r7, #2436	; 0x984
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000158 	.word	0x20000158
 8000b5c:	40010c00 	.word	0x40010c00
 8000b60:	40010800 	.word	0x40010800
 8000b64:	2000035c 	.word	0x2000035c

08000b68 <DelayUS>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	volatile uint32_t i;
	i = cnt * 10;
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
	while(i--);
 8000b7c:	bf00      	nop
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	1e5a      	subs	r2, r3, #1
 8000b82:	60fa      	str	r2, [r7, #12]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1fa      	bne.n	8000b7e <DelayUS+0x16>
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <WR_CMD>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&TP_hspi, &cmd, 1, 1000);
 8000b9e:	1df9      	adds	r1, r7, #7
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <WR_CMD+0x20>)
 8000ba8:	f001 fdff 	bl	80027aa <HAL_SPI_Transmit>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000b8 	.word	0x200000b8

08000bb8 <RD_AD>:
* Output         : None
* Return         :
* Attention		 : None
*******************************************************************************/
static uint16_t RD_AD(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	uint8_t buf[2] = {0, 0 };
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	803b      	strh	r3, [r7, #0]
	int value;

	HAL_SPI_Receive(&TP_hspi, buf, 2, 1000);
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	2202      	movs	r2, #2
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <RD_AD+0x34>)
 8000bcc:	f001 ff21 	bl	8002a12 <HAL_SPI_Receive>
	value = (((uint16_t)buf[0] * 256 +  buf[1]) >> 3) & 0x0FFF;
 8000bd0:	783b      	ldrb	r3, [r7, #0]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	787a      	ldrb	r2, [r7, #1]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	10db      	asrs	r3, r3, #3
 8000bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bde:	607b      	str	r3, [r7, #4]

	return value;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b29b      	uxth	r3, r3
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000b8 	.word	0x200000b8

08000bf0 <Read_X>:
* Output         : None
* Return         :
* Attention		 : None
*******************************************************************************/
uint16_t Read_X(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  uint16_t i;

  TP_CS(0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <Read_X+0x44>)
 8000bfe:	f001 f973 	bl	8001ee8 <HAL_GPIO_WritePin>
  DelayUS(1);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff ffb0 	bl	8000b68 <DelayUS>
  WR_CMD(CHX);
 8000c08:	2090      	movs	r0, #144	; 0x90
 8000c0a:	f7ff ffc3 	bl	8000b94 <WR_CMD>
  DelayUS(1);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff ffaa 	bl	8000b68 <DelayUS>
  i = RD_AD();
 8000c14:	f7ff ffd0 	bl	8000bb8 <RD_AD>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	80fb      	strh	r3, [r7, #6]
  TP_CS(1);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <Read_X+0x44>)
 8000c24:	f001 f960 	bl	8001ee8 <HAL_GPIO_WritePin>

  return i;
 8000c28:	88fb      	ldrh	r3, [r7, #6]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40010c00 	.word	0x40010c00

08000c38 <Read_Y>:
* Output         : None
* Return         :
* Attention		 : None
*******************************************************************************/
uint16_t Read_Y(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	uint16_t i;

  TP_CS(0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <Read_Y+0x44>)
 8000c46:	f001 f94f 	bl	8001ee8 <HAL_GPIO_WritePin>
  DelayUS(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff ff8c 	bl	8000b68 <DelayUS>
  WR_CMD(CHY);
 8000c50:	20d0      	movs	r0, #208	; 0xd0
 8000c52:	f7ff ff9f 	bl	8000b94 <WR_CMD>
  DelayUS(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff ff86 	bl	8000b68 <DelayUS>
  i = RD_AD();
 8000c5c:	f7ff ffac 	bl	8000bb8 <RD_AD>
 8000c60:	4603      	mov	r3, r0
 8000c62:	80fb      	strh	r3, [r7, #6]
  TP_CS(1);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <Read_Y+0x44>)
 8000c6c:	f001 f93c 	bl	8001ee8 <HAL_GPIO_WritePin>

  return i;
 8000c70:	88fb      	ldrh	r3, [r7, #6]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <TP_GetXY>:
* Output         : None
* Return         :
* Attention		 : None
*******************************************************************************/
void TP_GetXY(uint16_t *x, uint16_t *y)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	uint16_t tpx, tpy;

  tpx = Read_X();
 8000c8a:	f7ff ffb1 	bl	8000bf0 <Read_X>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	81fb      	strh	r3, [r7, #14]
  DelayUS(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ff68 	bl	8000b68 <DelayUS>
  tpy = Read_Y();
 8000c98:	f7ff ffce 	bl	8000c38 <Read_Y>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	81bb      	strh	r3, [r7, #12]
  *x = tpx;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	89fa      	ldrh	r2, [r7, #14]
 8000ca4:	801a      	strh	r2, [r3, #0]
  *y = tpy;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	89ba      	ldrh	r2, [r7, #12]
 8000caa:	801a      	strh	r2, [r3, #0]
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <GetTouchStatus>:
MAX_X=(x2+x4)/2 + ((x2+x4)/100);
MIN_Y=(y1+y2)/2 - ((y1+y2)/20);
MAX_Y=(y3+y4)/2 + ((y3+y4)/100);
}
int GetTouchStatus(Point * pos)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	uint16_t x, y, tmpx, tmpy;

//	if(GPIO_PIN_SET == TP_INT_IN()) return 0;

	TP_GetXY(&x, &y);
 8000cbc:	f107 0208 	add.w	r2, r7, #8
 8000cc0:	f107 030a 	add.w	r3, r7, #10
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ffda 	bl	8000c80 <TP_GetXY>

	if((x > MAX_X) || (x < MIN_X)) return 0;
 8000ccc:	897b      	ldrh	r3, [r7, #10]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <GetTouchStatus+0x128>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dc05      	bgt.n	8000ce4 <GetTouchStatus+0x30>
 8000cd8:	897b      	ldrh	r3, [r7, #10]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b40      	ldr	r3, [pc, #256]	; (8000de0 <GetTouchStatus+0x12c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	da01      	bge.n	8000ce8 <GetTouchStatus+0x34>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e074      	b.n	8000dd2 <GetTouchStatus+0x11e>
	if((y > MAX_Y) || (y < MIN_Y)) return 0;
 8000ce8:	893b      	ldrh	r3, [r7, #8]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b3d      	ldr	r3, [pc, #244]	; (8000de4 <GetTouchStatus+0x130>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dc05      	bgt.n	8000d00 <GetTouchStatus+0x4c>
 8000cf4:	893b      	ldrh	r3, [r7, #8]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <GetTouchStatus+0x134>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	da01      	bge.n	8000d04 <GetTouchStatus+0x50>
 8000d00:	2300      	movs	r3, #0
 8000d02:	e066      	b.n	8000dd2 <GetTouchStatus+0x11e>

//	pos->x = (x - 180) / ((3860 - 190) / 480);
//	pos->y = (y - 190) / ((3850 - 190) / 480);
	tmpx = (x - MIN_X) * 480 / (MAX_X - MIN_X);
 8000d04:	897b      	ldrh	r3, [r7, #10]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <GetTouchStatus+0x12c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	1ad2      	subs	r2, r2, r3
 8000d0e:	4613      	mov	r3, r2
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	015b      	lsls	r3, r3, #5
 8000d16:	4619      	mov	r1, r3
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <GetTouchStatus+0x128>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <GetTouchStatus+0x12c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	fb91 f3f3 	sdiv	r3, r1, r3
 8000d26:	81fb      	strh	r3, [r7, #14]
	tmpy = (y - MIN_Y) * 320 / (MAX_Y - MIN_Y);
 8000d28:	893b      	ldrh	r3, [r7, #8]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <GetTouchStatus+0x134>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	1ad2      	subs	r2, r2, r3
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <GetTouchStatus+0x130>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <GetTouchStatus+0x134>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	fb91 f3f3 	sdiv	r3, r1, r3
 8000d4a:	81bb      	strh	r3, [r7, #12]



	switch(ILI9488_GetDirection())
 8000d4c:	f7ff fa06 	bl	800015c <ILI9488_GetDirection>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d836      	bhi.n	8000dc4 <GetTouchStatus+0x110>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <GetTouchStatus+0xa8>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000d6d 	.word	0x08000d6d
 8000d60:	08000d7b 	.word	0x08000d7b
 8000d64:	08000d91 	.word	0x08000d91
 8000d68:	08000daf 	.word	0x08000daf
	{
		case 0:
			pos->x = tmpy;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	89ba      	ldrh	r2, [r7, #12]
 8000d70:	801a      	strh	r2, [r3, #0]
			pos->y = tmpx;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	89fa      	ldrh	r2, [r7, #14]
 8000d76:	805a      	strh	r2, [r3, #2]
			break;
 8000d78:	e024      	b.n	8000dc4 <GetTouchStatus+0x110>

		case 1:
			pos->x = tmpx;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	89fa      	ldrh	r2, [r7, #14]
 8000d7e:	801a      	strh	r2, [r3, #0]
			pos->y = 319 - tmpy;
 8000d80:	89bb      	ldrh	r3, [r7, #12]
 8000d82:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8000d86:	3301      	adds	r3, #1
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	805a      	strh	r2, [r3, #2]
			break;
 8000d8e:	e019      	b.n	8000dc4 <GetTouchStatus+0x110>

		case 2:
			pos->x = 319 - tmpy;
 8000d90:	89bb      	ldrh	r3, [r7, #12]
 8000d92:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8000d96:	3301      	adds	r3, #1
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	801a      	strh	r2, [r3, #0]
			pos->y = 479 - tmpx;
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8000da4:	3301      	adds	r3, #1
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	805a      	strh	r2, [r3, #2]
			break;
 8000dac:	e00a      	b.n	8000dc4 <GetTouchStatus+0x110>

		case 3:
			pos->x = 479 - tmpx;
 8000dae:	89fb      	ldrh	r3, [r7, #14]
 8000db0:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8000db4:	3301      	adds	r3, #1
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	801a      	strh	r2, [r3, #0]
			pos->y = tmpy;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	89ba      	ldrh	r2, [r7, #12]
 8000dc0:	805a      	strh	r2, [r3, #2]
			break;
 8000dc2:	bf00      	nop
	}

	xx=tmpx;
 8000dc4:	4a09      	ldr	r2, [pc, #36]	; (8000dec <GetTouchStatus+0x138>)
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
 8000dc8:	8013      	strh	r3, [r2, #0]
	yy=tmpy;
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <GetTouchStatus+0x13c>)
 8000dcc:	89bb      	ldrh	r3, [r7, #12]
 8000dce:	8013      	strh	r3, [r2, #0]
	return 1;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004
 8000de4:	20000010 	.word	0x20000010
 8000de8:	2000000c 	.word	0x2000000c
 8000dec:	20000154 	.word	0x20000154
 8000df0:	20000358 	.word	0x20000358

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df8:	f000 fd88 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfc:	f000 f986 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e00:	f000 fa38 	bl	8001274 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e04:	f000 f9c8 	bl	8001198 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e08:	f000 f9fe 	bl	8001208 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // LCD_Init();
  ILI9488_Init();
 8000e0c:	f7ff faca 	bl	80003a4 <ILI9488_Init>

  ILI9488_Fill_Screen(RED);
 8000e10:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000e14:	f7ff fc8e 	bl	8000734 <ILI9488_Fill_Screen>
 // HAL_Delay(50);
  ILI9488_Fill_Screen(GREEN);
 8000e18:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000e1c:	f7ff fc8a 	bl	8000734 <ILI9488_Fill_Screen>
 // HAL_Delay(50);
  ILI9488_Fill_Screen(BLUE);
 8000e20:	201f      	movs	r0, #31
 8000e22:	f7ff fc87 	bl	8000734 <ILI9488_Fill_Screen>
 // HAL_Delay(50);
  ILI9488_Fill_Screen(YELLOW);
 8000e26:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000e2a:	f7ff fc83 	bl	8000734 <ILI9488_Fill_Screen>
  //HAL_Delay(50);
  ILI9488_Fill_Screen(WHITE);
 8000e2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e32:	f7ff fc7f 	bl	8000734 <ILI9488_Fill_Screen>
  //Touch_Calibre();
/*
  ILI9488_LCD_RESIM(180,160,(char *)gImage_resim1,0);
*/
//*****BIRINCI SAYFA RESIMLERI
  T_RESIM[0].p_resim=(char*)gImage_buton;
 8000e36:	4bae      	ldr	r3, [pc, #696]	; (80010f0 <main+0x2fc>)
 8000e38:	4aae      	ldr	r2, [pc, #696]	; (80010f4 <main+0x300>)
 8000e3a:	601a      	str	r2, [r3, #0]
  T_RESIM[0].resim_korx=20;
 8000e3c:	4bac      	ldr	r3, [pc, #688]	; (80010f0 <main+0x2fc>)
 8000e3e:	2214      	movs	r2, #20
 8000e40:	809a      	strh	r2, [r3, #4]
  T_RESIM[0].resim_kory=80;
 8000e42:	4bab      	ldr	r3, [pc, #684]	; (80010f0 <main+0x2fc>)
 8000e44:	2250      	movs	r2, #80	; 0x50
 8000e46:	80da      	strh	r2, [r3, #6]
  T_RESIM[0].resim_type=0;
 8000e48:	4ba9      	ldr	r3, [pc, #676]	; (80010f0 <main+0x2fc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	731a      	strb	r2, [r3, #12]
  T_RESIM[0].resim_value=0;
 8000e4e:	4ba8      	ldr	r3, [pc, #672]	; (80010f0 <main+0x2fc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	735a      	strb	r2, [r3, #13]

  T_RESIM[1].p_resim=(char*)gImage_buton;
 8000e54:	4ba6      	ldr	r3, [pc, #664]	; (80010f0 <main+0x2fc>)
 8000e56:	4aa7      	ldr	r2, [pc, #668]	; (80010f4 <main+0x300>)
 8000e58:	611a      	str	r2, [r3, #16]
  T_RESIM[1].resim_korx=20;
 8000e5a:	4ba5      	ldr	r3, [pc, #660]	; (80010f0 <main+0x2fc>)
 8000e5c:	2214      	movs	r2, #20
 8000e5e:	829a      	strh	r2, [r3, #20]
  T_RESIM[1].resim_kory=180;
 8000e60:	4ba3      	ldr	r3, [pc, #652]	; (80010f0 <main+0x2fc>)
 8000e62:	22b4      	movs	r2, #180	; 0xb4
 8000e64:	82da      	strh	r2, [r3, #22]
  T_RESIM[1].resim_type=0;
 8000e66:	4ba2      	ldr	r3, [pc, #648]	; (80010f0 <main+0x2fc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	771a      	strb	r2, [r3, #28]
  T_RESIM[1].resim_value=1;
 8000e6c:	4ba0      	ldr	r3, [pc, #640]	; (80010f0 <main+0x2fc>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	775a      	strb	r2, [r3, #29]

  T_RESIM[2].p_resim=(char*)gImage_buton;
 8000e72:	4b9f      	ldr	r3, [pc, #636]	; (80010f0 <main+0x2fc>)
 8000e74:	4a9f      	ldr	r2, [pc, #636]	; (80010f4 <main+0x300>)
 8000e76:	621a      	str	r2, [r3, #32]
  T_RESIM[2].resim_korx=310;
 8000e78:	4b9d      	ldr	r3, [pc, #628]	; (80010f0 <main+0x2fc>)
 8000e7a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000e7e:	849a      	strh	r2, [r3, #36]	; 0x24
  T_RESIM[2].resim_kory=80;
 8000e80:	4b9b      	ldr	r3, [pc, #620]	; (80010f0 <main+0x2fc>)
 8000e82:	2250      	movs	r2, #80	; 0x50
 8000e84:	84da      	strh	r2, [r3, #38]	; 0x26
  T_RESIM[2].resim_type=1;
 8000e86:	4b9a      	ldr	r3, [pc, #616]	; (80010f0 <main+0x2fc>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  T_RESIM[2].resim_value=0;
 8000e8e:	4b98      	ldr	r3, [pc, #608]	; (80010f0 <main+0x2fc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  T_RESIM[3].p_resim=(char*)gImage_buton;
 8000e96:	4b96      	ldr	r3, [pc, #600]	; (80010f0 <main+0x2fc>)
 8000e98:	4a96      	ldr	r2, [pc, #600]	; (80010f4 <main+0x300>)
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  T_RESIM[3].resim_korx=310;
 8000e9c:	4b94      	ldr	r3, [pc, #592]	; (80010f0 <main+0x2fc>)
 8000e9e:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000ea2:	869a      	strh	r2, [r3, #52]	; 0x34
  T_RESIM[3].resim_kory=180;
 8000ea4:	4b92      	ldr	r3, [pc, #584]	; (80010f0 <main+0x2fc>)
 8000ea6:	22b4      	movs	r2, #180	; 0xb4
 8000ea8:	86da      	strh	r2, [r3, #54]	; 0x36
  T_RESIM[3].resim_type=1;
 8000eaa:	4b91      	ldr	r3, [pc, #580]	; (80010f0 <main+0x2fc>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  T_RESIM[3].resim_value=1;
 8000eb2:	4b8f      	ldr	r3, [pc, #572]	; (80010f0 <main+0x2fc>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  T_RESIM[4].p_resim=(char*)gImage_resim3;
 8000eba:	4b8d      	ldr	r3, [pc, #564]	; (80010f0 <main+0x2fc>)
 8000ebc:	4a8e      	ldr	r2, [pc, #568]	; (80010f8 <main+0x304>)
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
  T_RESIM[4].resim_korx=190;
 8000ec0:	4b8b      	ldr	r3, [pc, #556]	; (80010f0 <main+0x2fc>)
 8000ec2:	22be      	movs	r2, #190	; 0xbe
 8000ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  T_RESIM[4].resim_kory=130;
 8000ec8:	4b89      	ldr	r3, [pc, #548]	; (80010f0 <main+0x2fc>)
 8000eca:	2282      	movs	r2, #130	; 0x82
 8000ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  T_RESIM[4].resim_type=0;
 8000ed0:	4b87      	ldr	r3, [pc, #540]	; (80010f0 <main+0x2fc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  T_RESIM[4].resim_value=0;
 8000ed8:	4b85      	ldr	r3, [pc, #532]	; (80010f0 <main+0x2fc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  T_RESIM[7].p_resim=(char*)gImage_geri;
 8000ee0:	4b83      	ldr	r3, [pc, #524]	; (80010f0 <main+0x2fc>)
 8000ee2:	4a86      	ldr	r2, [pc, #536]	; (80010fc <main+0x308>)
 8000ee4:	671a      	str	r2, [r3, #112]	; 0x70
  T_RESIM[7].resim_korx=420;
 8000ee6:	4b82      	ldr	r3, [pc, #520]	; (80010f0 <main+0x2fc>)
 8000ee8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000eec:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  T_RESIM[7].resim_kory=265;
 8000ef0:	4b7f      	ldr	r3, [pc, #508]	; (80010f0 <main+0x2fc>)
 8000ef2:	f240 1209 	movw	r2, #265	; 0x109
 8000ef6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
  T_RESIM[7].resim_type=0;
 8000efa:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <main+0x2fc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  T_RESIM[7].resim_value=0;
 8000f02:	4b7b      	ldr	r3, [pc, #492]	; (80010f0 <main+0x2fc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
//****IKINCI SAYFA RESIMLERI
  T_RESIM[8].p_resim=(char*)gImage_resim3;
 8000f0a:	4b79      	ldr	r3, [pc, #484]	; (80010f0 <main+0x2fc>)
 8000f0c:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <main+0x304>)
 8000f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  T_RESIM[8].resim_korx=10;
 8000f12:	4b77      	ldr	r3, [pc, #476]	; (80010f0 <main+0x2fc>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  T_RESIM[8].resim_kory=250;
 8000f1a:	4b75      	ldr	r3, [pc, #468]	; (80010f0 <main+0x2fc>)
 8000f1c:	22fa      	movs	r2, #250	; 0xfa
 8000f1e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  T_RESIM[8].resim_type=0;
 8000f22:	4b73      	ldr	r3, [pc, #460]	; (80010f0 <main+0x2fc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  T_RESIM[8].resim_value=0;
 8000f2a:	4b71      	ldr	r3, [pc, #452]	; (80010f0 <main+0x2fc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  T_RESIM[9].p_resim=(char*)gImage_buton;
 8000f32:	4b6f      	ldr	r3, [pc, #444]	; (80010f0 <main+0x2fc>)
 8000f34:	4a6f      	ldr	r2, [pc, #444]	; (80010f4 <main+0x300>)
 8000f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  T_RESIM[9].resim_korx=20;
 8000f3a:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <main+0x2fc>)
 8000f3c:	2214      	movs	r2, #20
 8000f3e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  T_RESIM[9].resim_kory=100;
 8000f42:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <main+0x2fc>)
 8000f44:	2264      	movs	r2, #100	; 0x64
 8000f46:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  T_RESIM[9].resim_type=0;
 8000f4a:	4b69      	ldr	r3, [pc, #420]	; (80010f0 <main+0x2fc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
  T_RESIM[9].resim_value=0;
 8000f52:	4b67      	ldr	r3, [pc, #412]	; (80010f0 <main+0x2fc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

  T_RESIM[10].p_resim=(char*)gImage_buton;
 8000f5a:	4b65      	ldr	r3, [pc, #404]	; (80010f0 <main+0x2fc>)
 8000f5c:	4a65      	ldr	r2, [pc, #404]	; (80010f4 <main+0x300>)
 8000f5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  T_RESIM[10].resim_korx=310;
 8000f62:	4b63      	ldr	r3, [pc, #396]	; (80010f0 <main+0x2fc>)
 8000f64:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000f68:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
  T_RESIM[10].resim_kory=100;
 8000f6c:	4b60      	ldr	r3, [pc, #384]	; (80010f0 <main+0x2fc>)
 8000f6e:	2264      	movs	r2, #100	; 0x64
 8000f70:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
  T_RESIM[10].resim_type=1;
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <main+0x2fc>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  T_RESIM[10].resim_value=0;
 8000f7c:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <main+0x2fc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

  T_RESIM[15].p_resim=(char*)gImage_geri;
 8000f84:	4b5a      	ldr	r3, [pc, #360]	; (80010f0 <main+0x2fc>)
 8000f86:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <main+0x308>)
 8000f88:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  T_RESIM[15].resim_korx=420;
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <main+0x2fc>)
 8000f8e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000f92:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  T_RESIM[15].resim_kory=265;
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <main+0x2fc>)
 8000f98:	f240 1209 	movw	r2, #265	; 0x109
 8000f9c:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  T_RESIM[15].resim_type=0;
 8000fa0:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <main+0x2fc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  T_RESIM[15].resim_value=0;
 8000fa8:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <main+0x2fc>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

ILI9488_Set_Rotation(0);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff f99d 	bl	80002f0 <ILI9488_Set_Rotation>
sayfa_no=0;
 8000fb6:	4b52      	ldr	r3, [pc, #328]	; (8001100 <main+0x30c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
SAYFA();
 8000fbc:	f000 fad4 	bl	8001568 <SAYFA>
HAL_Delay(2000);
 8000fc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc4:	f000 fd04 	bl	80019d0 <HAL_Delay>

ILI9488_Set_Rotation(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff f991 	bl	80002f0 <ILI9488_Set_Rotation>
sayfa_no=0;
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <main+0x30c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
SAYFA();
 8000fd4:	f000 fac8 	bl	8001568 <SAYFA>
HAL_Delay(2000);
 8000fd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fdc:	f000 fcf8 	bl	80019d0 <HAL_Delay>

ILI9488_Set_Rotation(2);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f7ff f985 	bl	80002f0 <ILI9488_Set_Rotation>
sayfa_no=0;
 8000fe6:	4b46      	ldr	r3, [pc, #280]	; (8001100 <main+0x30c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
SAYFA();
 8000fec:	f000 fabc 	bl	8001568 <SAYFA>
HAL_Delay(2000);
 8000ff0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff4:	f000 fcec 	bl	80019d0 <HAL_Delay>

ILI9488_Set_Rotation(3);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f7ff f979 	bl	80002f0 <ILI9488_Set_Rotation>
sayfa_no=0;
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <main+0x30c>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
SAYFA();
 8001004:	f000 fab0 	bl	8001568 <SAYFA>
HAL_Delay(2000);
 8001008:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800100c:	f000 fce0 	bl	80019d0 <HAL_Delay>

ILI9488_Set_Rotation(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff f96d 	bl	80002f0 <ILI9488_Set_Rotation>
sayfa_no=0;
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <main+0x30c>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
SAYFA();
 800101c:	f000 faa4 	bl	8001568 <SAYFA>
HAL_Delay(2000);
 8001020:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001024:	f000 fcd4 	bl	80019d0 <HAL_Delay>

sayfa_no=1;
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <main+0x30c>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
SAYFA();
 800102e:	f000 fa9b 	bl	8001568 <SAYFA>
HAL_Delay(2000);
 8001032:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001036:	f000 fccb 	bl	80019d0 <HAL_Delay>
sayfa_no=0;
 800103a:	4b31      	ldr	r3, [pc, #196]	; (8001100 <main+0x30c>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
SAYFA();
 8001040:	f000 fa92 	bl	8001568 <SAYFA>
  while (1)
  {
//	  ILI9488_Fill_Screen(WHITE);

	 if(GetTouchStatus(0) !=0){
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff fe35 	bl	8000cb4 <GetTouchStatus>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <main+0x262>
		 TOUCH_KONTROL();
 8001050:	f000 f986 	bl	8001360 <TOUCH_KONTROL>
 8001054:	e047      	b.n	80010e6 <main+0x2f2>
		 if(sayfa_no==1) {SAYFA1();sayfa_no=2;}
		 else if(sayfa_no==2) {SAYFA2();sayfa_no=1;}
		 */
	 }
	 else{
		 if(son_basilan !=0){
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <main+0x310>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d042      	beq.n	80010e6 <main+0x2f2>
			 if(T_RESIM[son_basilan-1].resim_type==0){  //eger buton tipi puspul ise tus bırakıldımı esik haline dönüyor
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <main+0x310>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	3b01      	subs	r3, #1
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <main+0x2fc>)
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	330c      	adds	r3, #12
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d131      	bne.n	80010da <main+0x2e6>
				 T_RESIM[son_basilan-1].resim_value=!T_RESIM[son_basilan-1].resim_value;
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <main+0x310>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <main+0x2fc>)
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	4413      	add	r3, r2
 8001084:	330d      	adds	r3, #13
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0x310>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	3b01      	subs	r3, #1
 800109a:	4611      	mov	r1, r2
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <main+0x2fc>)
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	330d      	adds	r3, #13
 80010a4:	460a      	mov	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]
				 ILI9488_LCD_RESIM(son_basilan-1,(char *)T_RESIM[son_basilan-1].p_resim,T_RESIM[son_basilan-1].resim_value);
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <main+0x310>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	3b01      	subs	r3, #1
 80010b0:	b2d8      	uxtb	r0, r3
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <main+0x310>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <main+0x2fc>)
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4413      	add	r3, r2
 80010c0:	6819      	ldr	r1, [r3, #0]
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <main+0x310>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <main+0x2fc>)
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	4413      	add	r3, r2
 80010d0:	330d      	adds	r3, #13
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f7ff fc2d 	bl	8000934 <ILI9488_LCD_RESIM>
			 }
			 son_basilan=0;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <main+0x310>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
			 sayac=0;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <main+0x314>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
		 }


	 }
	 HAL_Delay(100);
 80010e6:	2064      	movs	r0, #100	; 0x64
 80010e8:	f000 fc72 	bl	80019d0 <HAL_Delay>
	 if(GetTouchStatus(0) !=0){
 80010ec:	e7aa      	b.n	8001044 <main+0x250>
 80010ee:	bf00      	nop
 80010f0:	20000158 	.word	0x20000158
 80010f4:	08005b84 	.word	0x08005b84
 80010f8:	0800c700 	.word	0x0800c700
 80010fc:	0800b370 	.word	0x0800b370
 8001100:	200000a5 	.word	0x200000a5
 8001104:	20000156 	.word	0x20000156
 8001108:	200003b4 	.word	0x200003b4

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b090      	sub	sp, #64	; 0x40
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	2228      	movs	r2, #40	; 0x28
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f002 f828 	bl	8003170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001136:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800114a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fedf 	bl	8001f18 <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001160:	f000 fa6a 	bl	8001638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f94a 	bl	8002418 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800118a:	f000 fa55 	bl	8001638 <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3740      	adds	r7, #64	; 0x40
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_SPI1_Init+0x68>)
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <MX_SPI1_Init+0x6c>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI1_Init+0x68>)
 80011a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_SPI1_Init+0x68>)
 80011ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_SPI1_Init+0x68>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0x68>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_SPI1_Init+0x68>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0x68>)
 80011c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0x68>)
 80011ce:	2208      	movs	r2, #8
 80011d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_SPI1_Init+0x68>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0x68>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_SPI1_Init+0x68>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0x68>)
 80011e6:	220a      	movs	r2, #10
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_SPI1_Init+0x68>)
 80011ec:	f001 fa7c 	bl	80026e8 <HAL_SPI_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80011f6:	f000 fa1f 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000035c 	.word	0x2000035c
 8001204:	40013000 	.word	0x40013000

08001208 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_SPI2_Init+0x64>)
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <MX_SPI2_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_SPI2_Init+0x64>)
 8001214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SPI2_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_SPI2_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI2_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_SPI2_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SPI2_Init+0x64>)
 8001234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001238:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI2_Init+0x64>)
 800123c:	2228      	movs	r2, #40	; 0x28
 800123e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_SPI2_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI2_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_SPI2_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI2_Init+0x64>)
 8001254:	220a      	movs	r2, #10
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_SPI2_Init+0x64>)
 800125a:	f001 fa45 	bl	80026e8 <HAL_SPI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 f9e8 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200000b8 	.word	0x200000b8
 8001270:	40003800 	.word	0x40003800

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <MX_GPIO_Init+0xe0>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a31      	ldr	r2, [pc, #196]	; (8001354 <MX_GPIO_Init+0xe0>)
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_GPIO_Init+0xe0>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_GPIO_Init+0xe0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <MX_GPIO_Init+0xe0>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_GPIO_Init+0xe0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_GPIO_Init+0xe0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a25      	ldr	r2, [pc, #148]	; (8001354 <MX_GPIO_Init+0xe0>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_GPIO_Init+0xe0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	4820      	ldr	r0, [pc, #128]	; (8001358 <MX_GPIO_Init+0xe4>)
 80012d6:	f000 fe07 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f240 4101 	movw	r1, #1025	; 0x401
 80012e0:	481e      	ldr	r0, [pc, #120]	; (800135c <MX_GPIO_Init+0xe8>)
 80012e2:	f000 fe01 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ec:	481b      	ldr	r0, [pc, #108]	; (800135c <MX_GPIO_Init+0xe8>)
 80012ee:	f000 fdfb 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <MX_GPIO_Init+0xe4>)
 800130a:	f000 fc69 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 800130e:	f240 4301 	movw	r3, #1025	; 0x401
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_GPIO_Init+0xe8>)
 8001328:	f000 fc5a 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2302      	movs	r3, #2
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_GPIO_Init+0xe8>)
 8001346:	f000 fc4b 	bl	8001be0 <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	40010800 	.word	0x40010800
 800135c:	40010c00 	.word	0x40010c00

08001360 <TOUCH_KONTROL>:

/* USER CODE BEGIN 4 */
void TOUCH_KONTROL(){
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b087      	sub	sp, #28
 8001364:	af04      	add	r7, sp, #16
	uint8_t ts=sayfa_no*sayfa_touch_adeti;
 8001366:	4b76      	ldr	r3, [pc, #472]	; (8001540 <TOUCH_KONTROL+0x1e0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4a76      	ldr	r2, [pc, #472]	; (8001544 <TOUCH_KONTROL+0x1e4>)
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = ts; i < ts+sayfa_touch_adeti; i++) {
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	e0d4      	b.n	8001524 <TOUCH_KONTROL+0x1c4>
		if(xx > T_RESIM[i].resim_korx && yy > T_RESIM[i].resim_kory && xx < T_RESIM[i].resim_korx+T_RESIM[i].resim_w && yy < T_RESIM[i].resim_kory+T_RESIM[i].resim_h){
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4a72      	ldr	r2, [pc, #456]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4413      	add	r3, r2
 8001382:	3304      	adds	r3, #4
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	4b71      	ldr	r3, [pc, #452]	; (800154c <TOUCH_KONTROL+0x1ec>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	429a      	cmp	r2, r3
 800138e:	f080 80c3 	bcs.w	8001518 <TOUCH_KONTROL+0x1b8>
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4a6c      	ldr	r2, [pc, #432]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	3306      	adds	r3, #6
 800139c:	881a      	ldrh	r2, [r3, #0]
 800139e:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <TOUCH_KONTROL+0x1f0>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f080 80b7 	bcs.w	8001518 <TOUCH_KONTROL+0x1b8>
 80013aa:	4b68      	ldr	r3, [pc, #416]	; (800154c <TOUCH_KONTROL+0x1ec>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4a64      	ldr	r2, [pc, #400]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	3304      	adds	r3, #4
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4a61      	ldr	r2, [pc, #388]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	3308      	adds	r3, #8
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4403      	add	r3, r0
 80013ce:	4299      	cmp	r1, r3
 80013d0:	f280 80a2 	bge.w	8001518 <TOUCH_KONTROL+0x1b8>
 80013d4:	4b5e      	ldr	r3, [pc, #376]	; (8001550 <TOUCH_KONTROL+0x1f0>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4a5a      	ldr	r2, [pc, #360]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	3306      	adds	r3, #6
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a56      	ldr	r2, [pc, #344]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	4413      	add	r3, r2
 80013f2:	330a      	adds	r3, #10
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	4403      	add	r3, r0
 80013f8:	4299      	cmp	r1, r3
 80013fa:	f280 808d 	bge.w	8001518 <TOUCH_KONTROL+0x1b8>
			sprintf(yazi,"sayfa no=%d resim no=%d type=%d value=%d sayac=%d \n",sayfa_no,i,T_RESIM[i].resim_type,T_RESIM[i].resim_value,sayac);
 80013fe:	4b50      	ldr	r3, [pc, #320]	; (8001540 <TOUCH_KONTROL+0x1e0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461c      	mov	r4, r3
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	494f      	ldr	r1, [pc, #316]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	440b      	add	r3, r1
 800140e:	330c      	adds	r3, #12
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	494c      	ldr	r1, [pc, #304]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	440b      	add	r3, r1
 800141c:	330d      	adds	r3, #13
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <TOUCH_KONTROL+0x1f4>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	9101      	str	r1, [sp, #4]
 800142a:	9000      	str	r0, [sp, #0]
 800142c:	4613      	mov	r3, r2
 800142e:	4622      	mov	r2, r4
 8001430:	4949      	ldr	r1, [pc, #292]	; (8001558 <TOUCH_KONTROL+0x1f8>)
 8001432:	484a      	ldr	r0, [pc, #296]	; (800155c <TOUCH_KONTROL+0x1fc>)
 8001434:	f001 fea4 	bl	8003180 <siprintf>
			ILI9488_LCD_Font(5,5,yazi ,(char *) Times_New_Roman20x24,WHITE, BLUE);
 8001438:	231f      	movs	r3, #31
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <TOUCH_KONTROL+0x200>)
 8001444:	4a45      	ldr	r2, [pc, #276]	; (800155c <TOUCH_KONTROL+0x1fc>)
 8001446:	2105      	movs	r1, #5
 8001448:	2005      	movs	r0, #5
 800144a:	f7ff f99d 	bl	8000788 <ILI9488_LCD_Font>
	//		HAL_Delay(500);
			//********************
			if(son_basilan==0){
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <TOUCH_KONTROL+0x204>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d121      	bne.n	800149c <TOUCH_KONTROL+0x13c>
				T_RESIM[i].resim_value=!T_RESIM[i].resim_value; //resmin tersi gösteriliyor
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	330d      	adds	r3, #13
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	b2da      	uxtb	r2, r3
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4611      	mov	r1, r2
 8001472:	4a35      	ldr	r2, [pc, #212]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	330d      	adds	r3, #13
 800147a:	460a      	mov	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
			    ILI9488_LCD_RESIM(i,(char *)T_RESIM[i].p_resim,T_RESIM[i].resim_value);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	4a31      	ldr	r2, [pc, #196]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4413      	add	r3, r2
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <TOUCH_KONTROL+0x1e8>)
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	330d      	adds	r3, #13
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fa4c 	bl	8000934 <ILI9488_LCD_RESIM>
			}
			sayac++;
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <TOUCH_KONTROL+0x1f4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <TOUCH_KONTROL+0x1f4>)
 80014a6:	701a      	strb	r2, [r3, #0]
			son_basilan=i+1;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <TOUCH_KONTROL+0x204>)
 80014b0:	701a      	strb	r2, [r3, #0]
			switch (i) {
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d831      	bhi.n	800151c <TOUCH_KONTROL+0x1bc>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <TOUCH_KONTROL+0x160>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	0800151d 	.word	0x0800151d
 80014c4:	0800151d 	.word	0x0800151d
 80014c8:	0800151d 	.word	0x0800151d
 80014cc:	0800151d 	.word	0x0800151d
 80014d0:	0800151d 	.word	0x0800151d
 80014d4:	0800151d 	.word	0x0800151d
 80014d8:	0800151d 	.word	0x0800151d
 80014dc:	08001501 	.word	0x08001501
 80014e0:	0800151d 	.word	0x0800151d
 80014e4:	0800151d 	.word	0x0800151d
 80014e8:	0800151d 	.word	0x0800151d
 80014ec:	0800151d 	.word	0x0800151d
 80014f0:	0800151d 	.word	0x0800151d
 80014f4:	0800151d 	.word	0x0800151d
 80014f8:	0800151d 	.word	0x0800151d
 80014fc:	0800150d 	.word	0x0800150d
					break;
				case 3:

				   break;
				case 7: //sayfa 0 geri komutu
					sayfa_no=1;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <TOUCH_KONTROL+0x1e0>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
					SAYFA();
 8001506:	f000 f82f 	bl	8001568 <SAYFA>
					break;
 800150a:	e008      	b.n	800151e <TOUCH_KONTROL+0x1be>
				   break;
				case 11:

					break;
				case 15:  //sayfa 1 geri komutu
					sayfa_no=0;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <TOUCH_KONTROL+0x1e0>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
					SAYFA();
 8001512:	f000 f829 	bl	8001568 <SAYFA>
				   break;
 8001516:	e002      	b.n	800151e <TOUCH_KONTROL+0x1be>
				default:
					break;
			}

		}
 8001518:	bf00      	nop
 800151a:	e000      	b.n	800151e <TOUCH_KONTROL+0x1be>
					break;
 800151c:	bf00      	nop
	for (i = ts; i < ts+sayfa_touch_adeti; i++) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	3301      	adds	r3, #1
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	4906      	ldr	r1, [pc, #24]	; (8001544 <TOUCH_KONTROL+0x1e4>)
 800152a:	7809      	ldrb	r1, [r1, #0]
 800152c:	440b      	add	r3, r1
 800152e:	429a      	cmp	r2, r3
 8001530:	f6ff af23 	blt.w	800137a <TOUCH_KONTROL+0x1a>
	}

}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	200000a5 	.word	0x200000a5
 8001544:	20000014 	.word	0x20000014
 8001548:	20000158 	.word	0x20000158
 800154c:	20000154 	.word	0x20000154
 8001550:	20000358 	.word	0x20000358
 8001554:	200003b4 	.word	0x200003b4
 8001558:	08003a0c 	.word	0x08003a0c
 800155c:	20000114 	.word	0x20000114
 8001560:	08003a74 	.word	0x08003a74
 8001564:	20000156 	.word	0x20000156

08001568 <SAYFA>:
void SAYFA(){
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af02      	add	r7, sp, #8
	ILI9488_Fill_Screen(WHITE);
 800156e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001572:	f7ff f8df 	bl	8000734 <ILI9488_Fill_Screen>
	uint8_t ts=sayfa_no*sayfa_touch_adeti;
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <SAYFA+0xb4>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <SAYFA+0xb8>)
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = ts; i < ts+sayfa_touch_adeti; i++) {
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	e03c      	b.n	8001604 <SAYFA+0x9c>
		if((char *)T_RESIM[i].p_resim !=0){ //resim boş degilse
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4a25      	ldr	r2, [pc, #148]	; (8001624 <SAYFA+0xbc>)
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00e      	beq.n	80015b6 <SAYFA+0x4e>
			ILI9488_LCD_RESIM(i,(char *)T_RESIM[i].p_resim,T_RESIM[i].resim_value);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4a22      	ldr	r2, [pc, #136]	; (8001624 <SAYFA+0xbc>)
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <SAYFA+0xbc>)
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	330d      	adds	r3, #13
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff f9bf 	bl	8000934 <ILI9488_LCD_RESIM>
		}
		sprintf(yazi,"SAYFA NO=%d \n",sayfa_no);
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <SAYFA+0xb4>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	491a      	ldr	r1, [pc, #104]	; (8001628 <SAYFA+0xc0>)
 80015be:	481b      	ldr	r0, [pc, #108]	; (800162c <SAYFA+0xc4>)
 80015c0:	f001 fdde 	bl	8003180 <siprintf>
		ILI9488_LCD_Font(180,40,yazi ,(char *) Helvetica21x21,WHITE, GREEN);
 80015c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <SAYFA+0xc8>)
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <SAYFA+0xc4>)
 80015d4:	2128      	movs	r1, #40	; 0x28
 80015d6:	20b4      	movs	r0, #180	; 0xb4
 80015d8:	f7ff f8d6 	bl	8000788 <ILI9488_LCD_Font>
		sprintf(yazi,"BULENT ASLANTURK\n");
 80015dc:	4915      	ldr	r1, [pc, #84]	; (8001634 <SAYFA+0xcc>)
 80015de:	4813      	ldr	r0, [pc, #76]	; (800162c <SAYFA+0xc4>)
 80015e0:	f001 fdce 	bl	8003180 <siprintf>
		ILI9488_LCD_Font(140,290,yazi ,(char *) Helvetica21x21,WHITE, RED);
 80015e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <SAYFA+0xc8>)
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <SAYFA+0xc4>)
 80015f4:	f44f 7191 	mov.w	r1, #290	; 0x122
 80015f8:	208c      	movs	r0, #140	; 0x8c
 80015fa:	f7ff f8c5 	bl	8000788 <ILI9488_LCD_Font>
	for (i = ts; i < ts+sayfa_touch_adeti; i++) {
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	3301      	adds	r3, #1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	79fa      	ldrb	r2, [r7, #7]
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	4905      	ldr	r1, [pc, #20]	; (8001620 <SAYFA+0xb8>)
 800160a:	7809      	ldrb	r1, [r1, #0]
 800160c:	440b      	add	r3, r1
 800160e:	429a      	cmp	r2, r3
 8001610:	dbbb      	blt.n	800158a <SAYFA+0x22>
	}
//	 ILI9488_LCD_RESIM(0,(char *)gImage_buton,0);
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200000a5 	.word	0x200000a5
 8001620:	20000014 	.word	0x20000014
 8001624:	20000158 	.word	0x20000158
 8001628:	08003a40 	.word	0x08003a40
 800162c:	20000114 	.word	0x20000114
 8001630:	08004c1c 	.word	0x08004c1c
 8001634:	08003a50 	.word	0x08003a50

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_MspInit+0x5c>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_MspInit+0x5c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6193      	str	r3, [r2, #24]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_MspInit+0x5c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x5c>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x5c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x5c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_MspInit+0x60>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_MspInit+0x60>)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000

080016a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a31      	ldr	r2, [pc, #196]	; (8001788 <HAL_SPI_MspInit+0xe0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d124      	bne.n	8001712 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_SPI_MspInit+0xe4>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a2f      	ldr	r2, [pc, #188]	; (800178c <HAL_SPI_MspInit+0xe4>)
 80016ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_SPI_MspInit+0xe4>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <HAL_SPI_MspInit+0xe4>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a29      	ldr	r2, [pc, #164]	; (800178c <HAL_SPI_MspInit+0xe4>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_SPI_MspInit+0xe4>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016f8:	23a0      	movs	r3, #160	; 0xa0
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	4619      	mov	r1, r3
 800170a:	4821      	ldr	r0, [pc, #132]	; (8001790 <HAL_SPI_MspInit+0xe8>)
 800170c:	f000 fa68 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001710:	e036      	b.n	8001780 <HAL_SPI_MspInit+0xd8>
  else if(hspi->Instance==SPI2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a1f      	ldr	r2, [pc, #124]	; (8001794 <HAL_SPI_MspInit+0xec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d131      	bne.n	8001780 <HAL_SPI_MspInit+0xd8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_SPI_MspInit+0xe4>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <HAL_SPI_MspInit+0xe4>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	61d3      	str	r3, [r2, #28]
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_SPI_MspInit+0xe4>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_SPI_MspInit+0xe4>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <HAL_SPI_MspInit+0xe4>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_SPI_MspInit+0xe4>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800174c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	4619      	mov	r1, r3
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <HAL_SPI_MspInit+0xf0>)
 8001762:	f000 fa3d 	bl	8001be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 0318 	add.w	r3, r7, #24
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <HAL_SPI_MspInit+0xf0>)
 800177c:	f000 fa30 	bl	8001be0 <HAL_GPIO_Init>
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013000 	.word	0x40013000
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800
 8001794:	40003800 	.word	0x40003800
 8001798:	40010c00 	.word	0x40010c00

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f000 f8d9 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f001 fc7e 	bl	800311c <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20005000 	.word	0x20005000
 800184c:	00000400 	.word	0x00000400
 8001850:	200000a8 	.word	0x200000a8
 8001854:	200003d0 	.word	0x200003d0

08001858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <SystemInit+0x5c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <SystemInit+0x5c>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <SystemInit+0x5c>)
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4911      	ldr	r1, [pc, #68]	; (80018b4 <SystemInit+0x5c>)
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <SystemInit+0x60>)
 8001870:	4013      	ands	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <SystemInit+0x5c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <SystemInit+0x5c>)
 800187a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <SystemInit+0x5c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SystemInit+0x5c>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <SystemInit+0x5c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <SystemInit+0x5c>)
 8001896:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800189a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SystemInit+0x5c>)
 800189e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80018a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <SystemInit+0x64>)
 80018a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000
 80018b8:	f8ff0000 	.word	0xf8ff0000
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018c2:	e003      	b.n	80018cc <LoopCopyDataInit>

080018c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018ca:	3104      	adds	r1, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018cc:	480a      	ldr	r0, [pc, #40]	; (80018f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018d4:	d3f6      	bcc.n	80018c4 <CopyDataInit>
  ldr r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018d8:	e002      	b.n	80018e0 <LoopFillZerobss>

080018da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018dc:	f842 3b04 	str.w	r3, [r2], #4

080018e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018e4:	d3f9      	bcc.n	80018da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e6:	f7ff ffb7 	bl	8001858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f001 fc1d 	bl	8003128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ee:	f7ff fa81 	bl	8000df4 <main>
  bx lr
 80018f2:	4770      	bx	lr
  ldr r3, =_sidata
 80018f4:	0800fae4 	.word	0x0800fae4
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018fc:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8001900:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8001904:	200003cc 	.word	0x200003cc

08001908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC1_2_IRQHandler>
	...

0800190c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_Init+0x28>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x28>)
 8001916:	f043 0310 	orr.w	r3, r3, #16
 800191a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f92b 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f808 	bl	8001938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fe8c 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40022000 	.word	0x40022000

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f935 	bl	8001bc6 <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 f90b 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000018 	.word	0x20000018
 8001990:	20000020 	.word	0x20000020
 8001994:	2000001c 	.word	0x2000001c

08001998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_IncTick+0x1c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_IncTick+0x20>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a03      	ldr	r2, [pc, #12]	; (80019b8 <HAL_IncTick+0x20>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	20000020 	.word	0x20000020
 80019b8:	200003b8 	.word	0x200003b8

080019bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b02      	ldr	r3, [pc, #8]	; (80019cc <HAL_GetTick+0x10>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	200003b8 	.word	0x200003b8

080019d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff fff0 	bl	80019bc <HAL_GetTick>
 80019dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e8:	d005      	beq.n	80019f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_Delay+0x44>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019f6:	bf00      	nop
 80019f8:	f7ff ffe0 	bl	80019bc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d8f7      	bhi.n	80019f8 <HAL_Delay+0x28>
  {
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000020 	.word	0x20000020

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff90 	bl	8001a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff49 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff5e 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff90 	bl	8001ad0 <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5f 	bl	8001a7c <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffb0 	bl	8001b34 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b08b      	sub	sp, #44	; 0x2c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	e169      	b.n	8001ec8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8158 	bne.w	8001ec2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a9a      	ldr	r2, [pc, #616]	; (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d05e      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c1c:	4a98      	ldr	r2, [pc, #608]	; (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d875      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c22:	4a98      	ldr	r2, [pc, #608]	; (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d058      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c28:	4a96      	ldr	r2, [pc, #600]	; (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d86f      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c2e:	4a96      	ldr	r2, [pc, #600]	; (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d052      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c34:	4a94      	ldr	r2, [pc, #592]	; (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d869      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c3a:	4a94      	ldr	r2, [pc, #592]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d04c      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c40:	4a92      	ldr	r2, [pc, #584]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d863      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c46:	4a92      	ldr	r2, [pc, #584]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d046      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c4c:	4a90      	ldr	r2, [pc, #576]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d85d      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d82a      	bhi.n	8001cac <HAL_GPIO_Init+0xcc>
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d859      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <HAL_GPIO_Init+0x80>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001cdb 	.word	0x08001cdb
 8001c64:	08001cb5 	.word	0x08001cb5
 8001c68:	08001cc7 	.word	0x08001cc7
 8001c6c:	08001d09 	.word	0x08001d09
 8001c70:	08001d0f 	.word	0x08001d0f
 8001c74:	08001d0f 	.word	0x08001d0f
 8001c78:	08001d0f 	.word	0x08001d0f
 8001c7c:	08001d0f 	.word	0x08001d0f
 8001c80:	08001d0f 	.word	0x08001d0f
 8001c84:	08001d0f 	.word	0x08001d0f
 8001c88:	08001d0f 	.word	0x08001d0f
 8001c8c:	08001d0f 	.word	0x08001d0f
 8001c90:	08001d0f 	.word	0x08001d0f
 8001c94:	08001d0f 	.word	0x08001d0f
 8001c98:	08001d0f 	.word	0x08001d0f
 8001c9c:	08001d0f 	.word	0x08001d0f
 8001ca0:	08001d0f 	.word	0x08001d0f
 8001ca4:	08001cbd 	.word	0x08001cbd
 8001ca8:	08001cd1 	.word	0x08001cd1
 8001cac:	4a79      	ldr	r2, [pc, #484]	; (8001e94 <HAL_GPIO_Init+0x2b4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cb2:	e02c      	b.n	8001d0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e029      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e024      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	3308      	adds	r3, #8
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e01f      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	330c      	adds	r3, #12
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e01a      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e013      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	611a      	str	r2, [r3, #16]
          break;
 8001cfa:	e009      	b.n	8001d10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	615a      	str	r2, [r3, #20]
          break;
 8001d06:	e003      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
          break;
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          break;
 8001d0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2bff      	cmp	r3, #255	; 0xff
 8001d14:	d801      	bhi.n	8001d1a <HAL_GPIO_Init+0x13a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_Init+0x13e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2bff      	cmp	r3, #255	; 0xff
 8001d24:	d802      	bhi.n	8001d2c <HAL_GPIO_Init+0x14c>
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	e002      	b.n	8001d32 <HAL_GPIO_Init+0x152>
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3b08      	subs	r3, #8
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	210f      	movs	r1, #15
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80b1 	beq.w	8001ec2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d60:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x2b8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <HAL_GPIO_Init+0x2b8>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d78:	4a48      	ldr	r2, [pc, #288]	; (8001e9c <HAL_GPIO_Init+0x2bc>)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a40      	ldr	r2, [pc, #256]	; (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_GPIO_Init+0x1ec>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3f      	ldr	r2, [pc, #252]	; (8001ea4 <HAL_GPIO_Init+0x2c4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00d      	beq.n	8001dc8 <HAL_GPIO_Init+0x1e8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <HAL_GPIO_Init+0x1e4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <HAL_GPIO_Init+0x2cc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_GPIO_Init+0x1e0>
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e006      	b.n	8001dce <HAL_GPIO_Init+0x1ee>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e004      	b.n	8001dce <HAL_GPIO_Init+0x1ee>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e002      	b.n	8001dce <HAL_GPIO_Init+0x1ee>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_GPIO_Init+0x1ee>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd0:	f002 0203 	and.w	r2, r2, #3
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	4093      	lsls	r3, r2
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dde:	492f      	ldr	r1, [pc, #188]	; (8001e9c <HAL_GPIO_Init+0x2bc>)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	3302      	adds	r3, #2
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	492c      	ldr	r1, [pc, #176]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e06:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	4928      	ldr	r1, [pc, #160]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4922      	ldr	r1, [pc, #136]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	491e      	ldr	r1, [pc, #120]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4918      	ldr	r1, [pc, #96]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4914      	ldr	r1, [pc, #80]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d021      	beq.n	8001eb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
 8001e7c:	e021      	b.n	8001ec2 <HAL_GPIO_Init+0x2e2>
 8001e7e:	bf00      	nop
 8001e80:	10320000 	.word	0x10320000
 8001e84:	10310000 	.word	0x10310000
 8001e88:	10220000 	.word	0x10220000
 8001e8c:	10210000 	.word	0x10210000
 8001e90:	10120000 	.word	0x10120000
 8001e94:	10110000 	.word	0x10110000
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40010800 	.word	0x40010800
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	40011400 	.word	0x40011400
 8001eb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4909      	ldr	r1, [pc, #36]	; (8001ee4 <HAL_GPIO_Init+0x304>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f47f ae8e 	bne.w	8001bf4 <HAL_GPIO_Init+0x14>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	372c      	adds	r7, #44	; 0x2c
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	041a      	lsls	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e26c      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8087 	beq.w	8002046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f38:	4b92      	ldr	r3, [pc, #584]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f44:	4b8f      	ldr	r3, [pc, #572]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d112      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5e>
 8001f50:	4b8c      	ldr	r3, [pc, #560]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d10b      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5e:	4b89      	ldr	r3, [pc, #548]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d06c      	beq.n	8002044 <HAL_RCC_OscConfig+0x12c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d168      	bne.n	8002044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e246      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x76>
 8001f80:	4b80      	ldr	r3, [pc, #512]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7f      	ldr	r2, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e02e      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x98>
 8001f96:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7a      	ldr	r2, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b78      	ldr	r3, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a77      	ldr	r2, [pc, #476]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xbc>
 8001fba:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a71      	ldr	r2, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a67      	ldr	r2, [pc, #412]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fce2 	bl	80019bc <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fcde 	bl	80019bc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e1fa      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xe4>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fcce 	bl	80019bc <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fcca 	bl	80019bc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1e6      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x10c>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d063      	beq.n	800211a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002052:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x18c>
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x176>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e1ba      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4939      	ldr	r1, [pc, #228]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	e03a      	b.n	800211a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_RCC_OscConfig+0x270>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fc83 	bl	80019bc <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff fc7f 	bl	80019bc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e19b      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4927      	ldr	r1, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <HAL_RCC_OscConfig+0x270>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fc62 	bl	80019bc <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff fc5e 	bl	80019bc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e17a      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03a      	beq.n	800219c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d019      	beq.n	8002162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff fc42 	bl	80019bc <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7ff fc3e 	bl	80019bc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e15a      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800215a:	2001      	movs	r0, #1
 800215c:	f000 faa6 	bl	80026ac <RCC_Delay>
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_OscConfig+0x274>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff fc28 	bl	80019bc <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216e:	e00f      	b.n	8002190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff fc24 	bl	80019bc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d908      	bls.n	8002190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e140      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	42420000 	.word	0x42420000
 800218c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	4b9e      	ldr	r3, [pc, #632]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e9      	bne.n	8002170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a6 	beq.w	80022f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b97      	ldr	r3, [pc, #604]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b94      	ldr	r3, [pc, #592]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a93      	ldr	r2, [pc, #588]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b91      	ldr	r3, [pc, #580]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b8e      	ldr	r3, [pc, #568]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d118      	bne.n	8002214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7ff fbe5 	bl	80019bc <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7ff fbe1 	bl	80019bc <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	; 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0fd      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x4f8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x312>
 800221c:	4b7b      	ldr	r3, [pc, #492]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a7a      	ldr	r2, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	e02d      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x334>
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a75      	ldr	r2, [pc, #468]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b73      	ldr	r3, [pc, #460]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a72      	ldr	r2, [pc, #456]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x356>
 8002254:	4b6d      	ldr	r3, [pc, #436]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a6c      	ldr	r2, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a69      	ldr	r2, [pc, #420]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a66      	ldr	r2, [pc, #408]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a63      	ldr	r2, [pc, #396]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7ff fb95 	bl	80019bc <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7ff fb91 	bl	80019bc <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0ab      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	4b57      	ldr	r3, [pc, #348]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ee      	beq.n	8002296 <HAL_RCC_OscConfig+0x37e>
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7ff fb7f 	bl	80019bc <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7ff fb7b 	bl	80019bc <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e095      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	4b4c      	ldr	r3, [pc, #304]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b48      	ldr	r3, [pc, #288]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a47      	ldr	r2, [pc, #284]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8081 	beq.w	8002402 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d061      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d146      	bne.n	80023a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fb4f 	bl	80019bc <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff fb4b 	bl	80019bc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e067      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d108      	bne.n	800235c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	492d      	ldr	r1, [pc, #180]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a19      	ldr	r1, [r3, #32]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	430b      	orrs	r3, r1
 800236e:	4927      	ldr	r1, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff fb1f 	bl	80019bc <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7ff fb1b 	bl	80019bc <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e037      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x46a>
 80023a0:	e02f      	b.n	8002402 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_RCC_OscConfig+0x4fc>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fb08 	bl	80019bc <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff fb04 	bl	80019bc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e020      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x498>
 80023ce:	e018      	b.n	8002402 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e013      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_OscConfig+0x4f4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	42420060 	.word	0x42420060

08002418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d0      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4965      	ldr	r1, [pc, #404]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800247e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a52      	ldr	r2, [pc, #328]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d040      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e073      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06b      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4936      	ldr	r1, [pc, #216]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7ff fa58 	bl	80019bc <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7ff fa54 	bl	80019bc <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e053      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d210      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4922      	ldr	r1, [pc, #136]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1cc>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff f9b6 	bl	8001938 <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	0800fa98 	.word	0x0800fa98
 80025e4:	20000018 	.word	0x20000018
 80025e8:	2000001c 	.word	0x2000001c

080025ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b490      	push	{r4, r7}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_GetSysClockFreq+0xb0>)
 80025f4:	1d3c      	adds	r4, r7, #4
 80025f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025fc:	f240 2301 	movw	r3, #513	; 0x201
 8002600:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002616:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x40>
 8002626:	2b08      	cmp	r3, #8
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x46>
 800262a:	e02d      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	623b      	str	r3, [r7, #32]
      break;
 8002630:	e02d      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	0c9b      	lsrs	r3, r3, #18
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800263e:	4413      	add	r3, r2
 8002640:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002644:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0c5b      	lsrs	r3, r3, #17
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800265e:	4413      	add	r3, r2
 8002660:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002664:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800266a:	fb02 f203 	mul.w	r2, r2, r3
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e004      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	623b      	str	r3, [r7, #32]
      break;
 8002686:	e002      	b.n	800268e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800268a:	623b      	str	r3, [r7, #32]
      break;
 800268c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268e:	6a3b      	ldr	r3, [r7, #32]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bc90      	pop	{r4, r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	08003a64 	.word	0x08003a64
 80026a0:	40021000 	.word	0x40021000
 80026a4:	007a1200 	.word	0x007a1200
 80026a8:	003d0900 	.word	0x003d0900

080026ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <RCC_Delay+0x34>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <RCC_Delay+0x38>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a5b      	lsrs	r3, r3, #9
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c8:	bf00      	nop
  }
  while (Delay --);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	60fa      	str	r2, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f9      	bne.n	80026c8 <RCC_Delay+0x1c>
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000018 	.word	0x20000018
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e053      	b.n	80027a2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7fe ffc7 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002730:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	ea42 0103 	orr.w	r1, r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	0c1a      	lsrs	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f002 0204 	and.w	r2, r2, #4
 8002780:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002790:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b088      	sub	sp, #32
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_SPI_Transmit+0x22>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e11e      	b.n	8002a0a <HAL_SPI_Transmit+0x260>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027d4:	f7ff f8f2 	bl	80019bc <HAL_GetTick>
 80027d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d002      	beq.n	80027f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027ea:	2302      	movs	r3, #2
 80027ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027ee:	e103      	b.n	80029f8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_SPI_Transmit+0x52>
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002800:	e0fa      	b.n	80029f8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2203      	movs	r2, #3
 8002806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002848:	d107      	bne.n	800285a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002858:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d007      	beq.n	8002878 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002876:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002880:	d14b      	bne.n	800291a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_SPI_Transmit+0xe6>
 800288a:	8afb      	ldrh	r3, [r7, #22]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d13e      	bne.n	800290e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	1c9a      	adds	r2, r3, #2
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028b4:	e02b      	b.n	800290e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d112      	bne.n	80028ea <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	1c9a      	adds	r2, r3, #2
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80028e8:	e011      	b.n	800290e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ea:	f7ff f867 	bl	80019bc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d803      	bhi.n	8002902 <HAL_SPI_Transmit+0x158>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d102      	bne.n	8002908 <HAL_SPI_Transmit+0x15e>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800290c:	e074      	b.n	80029f8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ce      	bne.n	80028b6 <HAL_SPI_Transmit+0x10c>
 8002918:	e04c      	b.n	80029b4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_SPI_Transmit+0x17e>
 8002922:	8afb      	ldrh	r3, [r7, #22]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d140      	bne.n	80029aa <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800294e:	e02c      	b.n	80029aa <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d113      	bne.n	8002986 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	7812      	ldrb	r2, [r2, #0]
 800296a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	86da      	strh	r2, [r3, #54]	; 0x36
 8002984:	e011      	b.n	80029aa <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002986:	f7ff f819 	bl	80019bc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d803      	bhi.n	800299e <HAL_SPI_Transmit+0x1f4>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d102      	bne.n	80029a4 <HAL_SPI_Transmit+0x1fa>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029a8:	e026      	b.n	80029f8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1cd      	bne.n	8002950 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fb91 	bl	80030e0 <SPI_EndRxTxTransaction>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e000      	b.n	80029f8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80029f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b088      	sub	sp, #32
 8002a16:	af02      	add	r7, sp, #8
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a2e:	d112      	bne.n	8002a56 <HAL_SPI_Receive+0x44>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10e      	bne.n	8002a56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a40:	88fa      	ldrh	r2, [r7, #6]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f8e9 	bl	8002c24 <HAL_SPI_TransmitReceive>
 8002a52:	4603      	mov	r3, r0
 8002a54:	e0e2      	b.n	8002c1c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_SPI_Receive+0x52>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0db      	b.n	8002c1c <HAL_SPI_Receive+0x20a>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a6c:	f7fe ffa6 	bl	80019bc <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d002      	beq.n	8002a84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a82:	e0c2      	b.n	8002c0a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SPI_Receive+0x7e>
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a94:	e0b9      	b.n	8002c0a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002adc:	d107      	bne.n	8002aee <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d007      	beq.n	8002b0c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d162      	bne.n	8002bda <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b14:	e02e      	b.n	8002b74 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d115      	bne.n	8002b50 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f103 020c 	add.w	r2, r3, #12
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b4e:	e011      	b.n	8002b74 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b50:	f7fe ff34 	bl	80019bc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d803      	bhi.n	8002b68 <HAL_SPI_Receive+0x156>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d102      	bne.n	8002b6e <HAL_SPI_Receive+0x15c>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b72:	e04a      	b.n	8002c0a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1cb      	bne.n	8002b16 <HAL_SPI_Receive+0x104>
 8002b7e:	e031      	b.n	8002be4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d113      	bne.n	8002bb6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	b292      	uxth	r2, r2
 8002b9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bb4:	e011      	b.n	8002bda <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bb6:	f7fe ff01 	bl	80019bc <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d803      	bhi.n	8002bce <HAL_SPI_Receive+0x1bc>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d102      	bne.n	8002bd4 <HAL_SPI_Receive+0x1c2>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002bd8:	e017      	b.n	8002c0a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1cd      	bne.n	8002b80 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	6839      	ldr	r1, [r7, #0]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fa27 	bl	800303c <SPI_EndRxTransaction>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
 8002c06:	e000      	b.n	8002c0a <HAL_SPI_Receive+0x1f8>
  }

error :
 8002c08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	; 0x30
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c32:	2301      	movs	r3, #1
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_SPI_TransmitReceive+0x26>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e18a      	b.n	8002f60 <HAL_SPI_TransmitReceive+0x33c>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c52:	f7fe feb3 	bl	80019bc <HAL_GetTick>
 8002c56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d00f      	beq.n	8002c94 <HAL_SPI_TransmitReceive+0x70>
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c7a:	d107      	bne.n	8002c8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <HAL_SPI_TransmitReceive+0x68>
 8002c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d003      	beq.n	8002c94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c92:	e15b      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_SPI_TransmitReceive+0x82>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_SPI_TransmitReceive+0x82>
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d103      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cac:	e14e      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d003      	beq.n	8002cc2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	887a      	ldrh	r2, [r7, #2]
 8002cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	887a      	ldrh	r2, [r7, #2]
 8002cea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	d007      	beq.n	8002d16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d1e:	d178      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_SPI_TransmitReceive+0x10a>
 8002d28:	8b7b      	ldrh	r3, [r7, #26]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d166      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	1c9a      	adds	r2, r3, #2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d52:	e053      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d11b      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x176>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d016      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x176>
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d113      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	881a      	ldrh	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	1c9a      	adds	r2, r3, #2
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d119      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x1b8>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d014      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	b292      	uxth	r2, r2
 8002dbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	1c9a      	adds	r2, r3, #2
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ddc:	f7fe fdee 	bl	80019bc <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d807      	bhi.n	8002dfc <HAL_SPI_TransmitReceive+0x1d8>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d003      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dfa:	e0a7      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1a6      	bne.n	8002d54 <HAL_SPI_TransmitReceive+0x130>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1a1      	bne.n	8002d54 <HAL_SPI_TransmitReceive+0x130>
 8002e10:	e07c      	b.n	8002f0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_TransmitReceive+0x1fc>
 8002e1a:	8b7b      	ldrh	r3, [r7, #26]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d16b      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e46:	e057      	b.n	8002ef8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d11c      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x26c>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0x26c>
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d114      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d119      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x2ae>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d014      	beq.n	8002ed2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ed2:	f7fe fd73 	bl	80019bc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d803      	bhi.n	8002eea <HAL_SPI_TransmitReceive+0x2c6>
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d102      	bne.n	8002ef0 <HAL_SPI_TransmitReceive+0x2cc>
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ef6:	e029      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1a2      	bne.n	8002e48 <HAL_SPI_TransmitReceive+0x224>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d19d      	bne.n	8002e48 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f8e5 	bl	80030e0 <SPI_EndRxTxTransaction>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f28:	e010      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	e000      	b.n	8002f4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3730      	adds	r7, #48	; 0x30
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f78:	e04c      	b.n	8003014 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d048      	beq.n	8003014 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f82:	f7fe fd1b 	bl	80019bc <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d902      	bls.n	8002f98 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d13d      	bne.n	8003014 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb0:	d111      	bne.n	8002fd6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fba:	d004      	beq.n	8002fc6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc4:	d107      	bne.n	8002fd6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fde:	d10f      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ffe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e00f      	b.n	8003034 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	429a      	cmp	r2, r3
 8003030:	d1a3      	bne.n	8002f7a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003050:	d111      	bne.n	8003076 <SPI_EndRxTransaction+0x3a>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305a:	d004      	beq.n	8003066 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	d107      	bne.n	8003076 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003074:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307e:	d117      	bne.n	80030b0 <SPI_EndRxTransaction+0x74>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d112      	bne.n	80030b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2200      	movs	r2, #0
 8003092:	2101      	movs	r1, #1
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff ff67 	bl	8002f68 <SPI_WaitFlagStateUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01a      	beq.n	80030d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e013      	b.n	80030d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7ff ff54 	bl	8002f68 <SPI_WaitFlagStateUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e000      	b.n	80030d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff ff36 	bl	8002f68 <SPI_WaitFlagStateUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e000      	b.n	8003114 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <__errno>:
 800311c:	4b01      	ldr	r3, [pc, #4]	; (8003124 <__errno+0x8>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000024 	.word	0x20000024

08003128 <__libc_init_array>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	2600      	movs	r6, #0
 800312c:	4d0c      	ldr	r5, [pc, #48]	; (8003160 <__libc_init_array+0x38>)
 800312e:	4c0d      	ldr	r4, [pc, #52]	; (8003164 <__libc_init_array+0x3c>)
 8003130:	1b64      	subs	r4, r4, r5
 8003132:	10a4      	asrs	r4, r4, #2
 8003134:	42a6      	cmp	r6, r4
 8003136:	d109      	bne.n	800314c <__libc_init_array+0x24>
 8003138:	f000 fc5c 	bl	80039f4 <_init>
 800313c:	2600      	movs	r6, #0
 800313e:	4d0a      	ldr	r5, [pc, #40]	; (8003168 <__libc_init_array+0x40>)
 8003140:	4c0a      	ldr	r4, [pc, #40]	; (800316c <__libc_init_array+0x44>)
 8003142:	1b64      	subs	r4, r4, r5
 8003144:	10a4      	asrs	r4, r4, #2
 8003146:	42a6      	cmp	r6, r4
 8003148:	d105      	bne.n	8003156 <__libc_init_array+0x2e>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003150:	4798      	blx	r3
 8003152:	3601      	adds	r6, #1
 8003154:	e7ee      	b.n	8003134 <__libc_init_array+0xc>
 8003156:	f855 3b04 	ldr.w	r3, [r5], #4
 800315a:	4798      	blx	r3
 800315c:	3601      	adds	r6, #1
 800315e:	e7f2      	b.n	8003146 <__libc_init_array+0x1e>
 8003160:	0800fadc 	.word	0x0800fadc
 8003164:	0800fadc 	.word	0x0800fadc
 8003168:	0800fadc 	.word	0x0800fadc
 800316c:	0800fae0 	.word	0x0800fae0

08003170 <memset>:
 8003170:	4603      	mov	r3, r0
 8003172:	4402      	add	r2, r0
 8003174:	4293      	cmp	r3, r2
 8003176:	d100      	bne.n	800317a <memset+0xa>
 8003178:	4770      	bx	lr
 800317a:	f803 1b01 	strb.w	r1, [r3], #1
 800317e:	e7f9      	b.n	8003174 <memset+0x4>

08003180 <siprintf>:
 8003180:	b40e      	push	{r1, r2, r3}
 8003182:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003186:	b500      	push	{lr}
 8003188:	b09c      	sub	sp, #112	; 0x70
 800318a:	ab1d      	add	r3, sp, #116	; 0x74
 800318c:	9002      	str	r0, [sp, #8]
 800318e:	9006      	str	r0, [sp, #24]
 8003190:	9107      	str	r1, [sp, #28]
 8003192:	9104      	str	r1, [sp, #16]
 8003194:	4808      	ldr	r0, [pc, #32]	; (80031b8 <siprintf+0x38>)
 8003196:	4909      	ldr	r1, [pc, #36]	; (80031bc <siprintf+0x3c>)
 8003198:	f853 2b04 	ldr.w	r2, [r3], #4
 800319c:	9105      	str	r1, [sp, #20]
 800319e:	6800      	ldr	r0, [r0, #0]
 80031a0:	a902      	add	r1, sp, #8
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	f000 f868 	bl	8003278 <_svfiprintf_r>
 80031a8:	2200      	movs	r2, #0
 80031aa:	9b02      	ldr	r3, [sp, #8]
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	b01c      	add	sp, #112	; 0x70
 80031b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031b4:	b003      	add	sp, #12
 80031b6:	4770      	bx	lr
 80031b8:	20000024 	.word	0x20000024
 80031bc:	ffff0208 	.word	0xffff0208

080031c0 <__ssputs_r>:
 80031c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c4:	688e      	ldr	r6, [r1, #8]
 80031c6:	4682      	mov	sl, r0
 80031c8:	429e      	cmp	r6, r3
 80031ca:	460c      	mov	r4, r1
 80031cc:	4690      	mov	r8, r2
 80031ce:	461f      	mov	r7, r3
 80031d0:	d838      	bhi.n	8003244 <__ssputs_r+0x84>
 80031d2:	898a      	ldrh	r2, [r1, #12]
 80031d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031d8:	d032      	beq.n	8003240 <__ssputs_r+0x80>
 80031da:	6825      	ldr	r5, [r4, #0]
 80031dc:	6909      	ldr	r1, [r1, #16]
 80031de:	3301      	adds	r3, #1
 80031e0:	eba5 0901 	sub.w	r9, r5, r1
 80031e4:	6965      	ldr	r5, [r4, #20]
 80031e6:	444b      	add	r3, r9
 80031e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031f0:	106d      	asrs	r5, r5, #1
 80031f2:	429d      	cmp	r5, r3
 80031f4:	bf38      	it	cc
 80031f6:	461d      	movcc	r5, r3
 80031f8:	0553      	lsls	r3, r2, #21
 80031fa:	d531      	bpl.n	8003260 <__ssputs_r+0xa0>
 80031fc:	4629      	mov	r1, r5
 80031fe:	f000 fb53 	bl	80038a8 <_malloc_r>
 8003202:	4606      	mov	r6, r0
 8003204:	b950      	cbnz	r0, 800321c <__ssputs_r+0x5c>
 8003206:	230c      	movs	r3, #12
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f8ca 3000 	str.w	r3, [sl]
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003216:	81a3      	strh	r3, [r4, #12]
 8003218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800321c:	464a      	mov	r2, r9
 800321e:	6921      	ldr	r1, [r4, #16]
 8003220:	f000 face 	bl	80037c0 <memcpy>
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800322a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322e:	81a3      	strh	r3, [r4, #12]
 8003230:	6126      	str	r6, [r4, #16]
 8003232:	444e      	add	r6, r9
 8003234:	6026      	str	r6, [r4, #0]
 8003236:	463e      	mov	r6, r7
 8003238:	6165      	str	r5, [r4, #20]
 800323a:	eba5 0509 	sub.w	r5, r5, r9
 800323e:	60a5      	str	r5, [r4, #8]
 8003240:	42be      	cmp	r6, r7
 8003242:	d900      	bls.n	8003246 <__ssputs_r+0x86>
 8003244:	463e      	mov	r6, r7
 8003246:	4632      	mov	r2, r6
 8003248:	4641      	mov	r1, r8
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	f000 fac6 	bl	80037dc <memmove>
 8003250:	68a3      	ldr	r3, [r4, #8]
 8003252:	6822      	ldr	r2, [r4, #0]
 8003254:	1b9b      	subs	r3, r3, r6
 8003256:	4432      	add	r2, r6
 8003258:	2000      	movs	r0, #0
 800325a:	60a3      	str	r3, [r4, #8]
 800325c:	6022      	str	r2, [r4, #0]
 800325e:	e7db      	b.n	8003218 <__ssputs_r+0x58>
 8003260:	462a      	mov	r2, r5
 8003262:	f000 fb7b 	bl	800395c <_realloc_r>
 8003266:	4606      	mov	r6, r0
 8003268:	2800      	cmp	r0, #0
 800326a:	d1e1      	bne.n	8003230 <__ssputs_r+0x70>
 800326c:	4650      	mov	r0, sl
 800326e:	6921      	ldr	r1, [r4, #16]
 8003270:	f000 face 	bl	8003810 <_free_r>
 8003274:	e7c7      	b.n	8003206 <__ssputs_r+0x46>
	...

08003278 <_svfiprintf_r>:
 8003278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800327c:	4698      	mov	r8, r3
 800327e:	898b      	ldrh	r3, [r1, #12]
 8003280:	4607      	mov	r7, r0
 8003282:	061b      	lsls	r3, r3, #24
 8003284:	460d      	mov	r5, r1
 8003286:	4614      	mov	r4, r2
 8003288:	b09d      	sub	sp, #116	; 0x74
 800328a:	d50e      	bpl.n	80032aa <_svfiprintf_r+0x32>
 800328c:	690b      	ldr	r3, [r1, #16]
 800328e:	b963      	cbnz	r3, 80032aa <_svfiprintf_r+0x32>
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	f000 fb09 	bl	80038a8 <_malloc_r>
 8003296:	6028      	str	r0, [r5, #0]
 8003298:	6128      	str	r0, [r5, #16]
 800329a:	b920      	cbnz	r0, 80032a6 <_svfiprintf_r+0x2e>
 800329c:	230c      	movs	r3, #12
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	e0d1      	b.n	800344a <_svfiprintf_r+0x1d2>
 80032a6:	2340      	movs	r3, #64	; 0x40
 80032a8:	616b      	str	r3, [r5, #20]
 80032aa:	2300      	movs	r3, #0
 80032ac:	9309      	str	r3, [sp, #36]	; 0x24
 80032ae:	2320      	movs	r3, #32
 80032b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b4:	2330      	movs	r3, #48	; 0x30
 80032b6:	f04f 0901 	mov.w	r9, #1
 80032ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80032be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003464 <_svfiprintf_r+0x1ec>
 80032c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c6:	4623      	mov	r3, r4
 80032c8:	469a      	mov	sl, r3
 80032ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032ce:	b10a      	cbz	r2, 80032d4 <_svfiprintf_r+0x5c>
 80032d0:	2a25      	cmp	r2, #37	; 0x25
 80032d2:	d1f9      	bne.n	80032c8 <_svfiprintf_r+0x50>
 80032d4:	ebba 0b04 	subs.w	fp, sl, r4
 80032d8:	d00b      	beq.n	80032f2 <_svfiprintf_r+0x7a>
 80032da:	465b      	mov	r3, fp
 80032dc:	4622      	mov	r2, r4
 80032de:	4629      	mov	r1, r5
 80032e0:	4638      	mov	r0, r7
 80032e2:	f7ff ff6d 	bl	80031c0 <__ssputs_r>
 80032e6:	3001      	adds	r0, #1
 80032e8:	f000 80aa 	beq.w	8003440 <_svfiprintf_r+0x1c8>
 80032ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032ee:	445a      	add	r2, fp
 80032f0:	9209      	str	r2, [sp, #36]	; 0x24
 80032f2:	f89a 3000 	ldrb.w	r3, [sl]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80a2 	beq.w	8003440 <_svfiprintf_r+0x1c8>
 80032fc:	2300      	movs	r3, #0
 80032fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003306:	f10a 0a01 	add.w	sl, sl, #1
 800330a:	9304      	str	r3, [sp, #16]
 800330c:	9307      	str	r3, [sp, #28]
 800330e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003312:	931a      	str	r3, [sp, #104]	; 0x68
 8003314:	4654      	mov	r4, sl
 8003316:	2205      	movs	r2, #5
 8003318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800331c:	4851      	ldr	r0, [pc, #324]	; (8003464 <_svfiprintf_r+0x1ec>)
 800331e:	f000 fa41 	bl	80037a4 <memchr>
 8003322:	9a04      	ldr	r2, [sp, #16]
 8003324:	b9d8      	cbnz	r0, 800335e <_svfiprintf_r+0xe6>
 8003326:	06d0      	lsls	r0, r2, #27
 8003328:	bf44      	itt	mi
 800332a:	2320      	movmi	r3, #32
 800332c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003330:	0711      	lsls	r1, r2, #28
 8003332:	bf44      	itt	mi
 8003334:	232b      	movmi	r3, #43	; 0x2b
 8003336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800333a:	f89a 3000 	ldrb.w	r3, [sl]
 800333e:	2b2a      	cmp	r3, #42	; 0x2a
 8003340:	d015      	beq.n	800336e <_svfiprintf_r+0xf6>
 8003342:	4654      	mov	r4, sl
 8003344:	2000      	movs	r0, #0
 8003346:	f04f 0c0a 	mov.w	ip, #10
 800334a:	9a07      	ldr	r2, [sp, #28]
 800334c:	4621      	mov	r1, r4
 800334e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003352:	3b30      	subs	r3, #48	; 0x30
 8003354:	2b09      	cmp	r3, #9
 8003356:	d94e      	bls.n	80033f6 <_svfiprintf_r+0x17e>
 8003358:	b1b0      	cbz	r0, 8003388 <_svfiprintf_r+0x110>
 800335a:	9207      	str	r2, [sp, #28]
 800335c:	e014      	b.n	8003388 <_svfiprintf_r+0x110>
 800335e:	eba0 0308 	sub.w	r3, r0, r8
 8003362:	fa09 f303 	lsl.w	r3, r9, r3
 8003366:	4313      	orrs	r3, r2
 8003368:	46a2      	mov	sl, r4
 800336a:	9304      	str	r3, [sp, #16]
 800336c:	e7d2      	b.n	8003314 <_svfiprintf_r+0x9c>
 800336e:	9b03      	ldr	r3, [sp, #12]
 8003370:	1d19      	adds	r1, r3, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	9103      	str	r1, [sp, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	bfbb      	ittet	lt
 800337a:	425b      	neglt	r3, r3
 800337c:	f042 0202 	orrlt.w	r2, r2, #2
 8003380:	9307      	strge	r3, [sp, #28]
 8003382:	9307      	strlt	r3, [sp, #28]
 8003384:	bfb8      	it	lt
 8003386:	9204      	strlt	r2, [sp, #16]
 8003388:	7823      	ldrb	r3, [r4, #0]
 800338a:	2b2e      	cmp	r3, #46	; 0x2e
 800338c:	d10c      	bne.n	80033a8 <_svfiprintf_r+0x130>
 800338e:	7863      	ldrb	r3, [r4, #1]
 8003390:	2b2a      	cmp	r3, #42	; 0x2a
 8003392:	d135      	bne.n	8003400 <_svfiprintf_r+0x188>
 8003394:	9b03      	ldr	r3, [sp, #12]
 8003396:	3402      	adds	r4, #2
 8003398:	1d1a      	adds	r2, r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	9203      	str	r2, [sp, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bfb8      	it	lt
 80033a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80033a6:	9305      	str	r3, [sp, #20]
 80033a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003474 <_svfiprintf_r+0x1fc>
 80033ac:	2203      	movs	r2, #3
 80033ae:	4650      	mov	r0, sl
 80033b0:	7821      	ldrb	r1, [r4, #0]
 80033b2:	f000 f9f7 	bl	80037a4 <memchr>
 80033b6:	b140      	cbz	r0, 80033ca <_svfiprintf_r+0x152>
 80033b8:	2340      	movs	r3, #64	; 0x40
 80033ba:	eba0 000a 	sub.w	r0, r0, sl
 80033be:	fa03 f000 	lsl.w	r0, r3, r0
 80033c2:	9b04      	ldr	r3, [sp, #16]
 80033c4:	3401      	adds	r4, #1
 80033c6:	4303      	orrs	r3, r0
 80033c8:	9304      	str	r3, [sp, #16]
 80033ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ce:	2206      	movs	r2, #6
 80033d0:	4825      	ldr	r0, [pc, #148]	; (8003468 <_svfiprintf_r+0x1f0>)
 80033d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d6:	f000 f9e5 	bl	80037a4 <memchr>
 80033da:	2800      	cmp	r0, #0
 80033dc:	d038      	beq.n	8003450 <_svfiprintf_r+0x1d8>
 80033de:	4b23      	ldr	r3, [pc, #140]	; (800346c <_svfiprintf_r+0x1f4>)
 80033e0:	bb1b      	cbnz	r3, 800342a <_svfiprintf_r+0x1b2>
 80033e2:	9b03      	ldr	r3, [sp, #12]
 80033e4:	3307      	adds	r3, #7
 80033e6:	f023 0307 	bic.w	r3, r3, #7
 80033ea:	3308      	adds	r3, #8
 80033ec:	9303      	str	r3, [sp, #12]
 80033ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f0:	4433      	add	r3, r6
 80033f2:	9309      	str	r3, [sp, #36]	; 0x24
 80033f4:	e767      	b.n	80032c6 <_svfiprintf_r+0x4e>
 80033f6:	460c      	mov	r4, r1
 80033f8:	2001      	movs	r0, #1
 80033fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80033fe:	e7a5      	b.n	800334c <_svfiprintf_r+0xd4>
 8003400:	2300      	movs	r3, #0
 8003402:	f04f 0c0a 	mov.w	ip, #10
 8003406:	4619      	mov	r1, r3
 8003408:	3401      	adds	r4, #1
 800340a:	9305      	str	r3, [sp, #20]
 800340c:	4620      	mov	r0, r4
 800340e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003412:	3a30      	subs	r2, #48	; 0x30
 8003414:	2a09      	cmp	r2, #9
 8003416:	d903      	bls.n	8003420 <_svfiprintf_r+0x1a8>
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0c5      	beq.n	80033a8 <_svfiprintf_r+0x130>
 800341c:	9105      	str	r1, [sp, #20]
 800341e:	e7c3      	b.n	80033a8 <_svfiprintf_r+0x130>
 8003420:	4604      	mov	r4, r0
 8003422:	2301      	movs	r3, #1
 8003424:	fb0c 2101 	mla	r1, ip, r1, r2
 8003428:	e7f0      	b.n	800340c <_svfiprintf_r+0x194>
 800342a:	ab03      	add	r3, sp, #12
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	462a      	mov	r2, r5
 8003430:	4638      	mov	r0, r7
 8003432:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <_svfiprintf_r+0x1f8>)
 8003434:	a904      	add	r1, sp, #16
 8003436:	f3af 8000 	nop.w
 800343a:	1c42      	adds	r2, r0, #1
 800343c:	4606      	mov	r6, r0
 800343e:	d1d6      	bne.n	80033ee <_svfiprintf_r+0x176>
 8003440:	89ab      	ldrh	r3, [r5, #12]
 8003442:	065b      	lsls	r3, r3, #25
 8003444:	f53f af2c 	bmi.w	80032a0 <_svfiprintf_r+0x28>
 8003448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800344a:	b01d      	add	sp, #116	; 0x74
 800344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003450:	ab03      	add	r3, sp, #12
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	462a      	mov	r2, r5
 8003456:	4638      	mov	r0, r7
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <_svfiprintf_r+0x1f8>)
 800345a:	a904      	add	r1, sp, #16
 800345c:	f000 f87c 	bl	8003558 <_printf_i>
 8003460:	e7eb      	b.n	800343a <_svfiprintf_r+0x1c2>
 8003462:	bf00      	nop
 8003464:	0800faa8 	.word	0x0800faa8
 8003468:	0800fab2 	.word	0x0800fab2
 800346c:	00000000 	.word	0x00000000
 8003470:	080031c1 	.word	0x080031c1
 8003474:	0800faae 	.word	0x0800faae

08003478 <_printf_common>:
 8003478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800347c:	4616      	mov	r6, r2
 800347e:	4699      	mov	r9, r3
 8003480:	688a      	ldr	r2, [r1, #8]
 8003482:	690b      	ldr	r3, [r1, #16]
 8003484:	4607      	mov	r7, r0
 8003486:	4293      	cmp	r3, r2
 8003488:	bfb8      	it	lt
 800348a:	4613      	movlt	r3, r2
 800348c:	6033      	str	r3, [r6, #0]
 800348e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003492:	460c      	mov	r4, r1
 8003494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003498:	b10a      	cbz	r2, 800349e <_printf_common+0x26>
 800349a:	3301      	adds	r3, #1
 800349c:	6033      	str	r3, [r6, #0]
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	0699      	lsls	r1, r3, #26
 80034a2:	bf42      	ittt	mi
 80034a4:	6833      	ldrmi	r3, [r6, #0]
 80034a6:	3302      	addmi	r3, #2
 80034a8:	6033      	strmi	r3, [r6, #0]
 80034aa:	6825      	ldr	r5, [r4, #0]
 80034ac:	f015 0506 	ands.w	r5, r5, #6
 80034b0:	d106      	bne.n	80034c0 <_printf_common+0x48>
 80034b2:	f104 0a19 	add.w	sl, r4, #25
 80034b6:	68e3      	ldr	r3, [r4, #12]
 80034b8:	6832      	ldr	r2, [r6, #0]
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	42ab      	cmp	r3, r5
 80034be:	dc28      	bgt.n	8003512 <_printf_common+0x9a>
 80034c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034c4:	1e13      	subs	r3, r2, #0
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	bf18      	it	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	0692      	lsls	r2, r2, #26
 80034ce:	d42d      	bmi.n	800352c <_printf_common+0xb4>
 80034d0:	4649      	mov	r1, r9
 80034d2:	4638      	mov	r0, r7
 80034d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d8:	47c0      	blx	r8
 80034da:	3001      	adds	r0, #1
 80034dc:	d020      	beq.n	8003520 <_printf_common+0xa8>
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	68e5      	ldr	r5, [r4, #12]
 80034e2:	f003 0306 	and.w	r3, r3, #6
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	bf18      	it	ne
 80034ea:	2500      	movne	r5, #0
 80034ec:	6832      	ldr	r2, [r6, #0]
 80034ee:	f04f 0600 	mov.w	r6, #0
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	bf08      	it	eq
 80034f6:	1aad      	subeq	r5, r5, r2
 80034f8:	6922      	ldr	r2, [r4, #16]
 80034fa:	bf08      	it	eq
 80034fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003500:	4293      	cmp	r3, r2
 8003502:	bfc4      	itt	gt
 8003504:	1a9b      	subgt	r3, r3, r2
 8003506:	18ed      	addgt	r5, r5, r3
 8003508:	341a      	adds	r4, #26
 800350a:	42b5      	cmp	r5, r6
 800350c:	d11a      	bne.n	8003544 <_printf_common+0xcc>
 800350e:	2000      	movs	r0, #0
 8003510:	e008      	b.n	8003524 <_printf_common+0xac>
 8003512:	2301      	movs	r3, #1
 8003514:	4652      	mov	r2, sl
 8003516:	4649      	mov	r1, r9
 8003518:	4638      	mov	r0, r7
 800351a:	47c0      	blx	r8
 800351c:	3001      	adds	r0, #1
 800351e:	d103      	bne.n	8003528 <_printf_common+0xb0>
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	3501      	adds	r5, #1
 800352a:	e7c4      	b.n	80034b6 <_printf_common+0x3e>
 800352c:	2030      	movs	r0, #48	; 0x30
 800352e:	18e1      	adds	r1, r4, r3
 8003530:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800353a:	4422      	add	r2, r4
 800353c:	3302      	adds	r3, #2
 800353e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003542:	e7c5      	b.n	80034d0 <_printf_common+0x58>
 8003544:	2301      	movs	r3, #1
 8003546:	4622      	mov	r2, r4
 8003548:	4649      	mov	r1, r9
 800354a:	4638      	mov	r0, r7
 800354c:	47c0      	blx	r8
 800354e:	3001      	adds	r0, #1
 8003550:	d0e6      	beq.n	8003520 <_printf_common+0xa8>
 8003552:	3601      	adds	r6, #1
 8003554:	e7d9      	b.n	800350a <_printf_common+0x92>
	...

08003558 <_printf_i>:
 8003558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	460c      	mov	r4, r1
 800355e:	7e27      	ldrb	r7, [r4, #24]
 8003560:	4691      	mov	r9, r2
 8003562:	2f78      	cmp	r7, #120	; 0x78
 8003564:	4680      	mov	r8, r0
 8003566:	469a      	mov	sl, r3
 8003568:	990c      	ldr	r1, [sp, #48]	; 0x30
 800356a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800356e:	d807      	bhi.n	8003580 <_printf_i+0x28>
 8003570:	2f62      	cmp	r7, #98	; 0x62
 8003572:	d80a      	bhi.n	800358a <_printf_i+0x32>
 8003574:	2f00      	cmp	r7, #0
 8003576:	f000 80d9 	beq.w	800372c <_printf_i+0x1d4>
 800357a:	2f58      	cmp	r7, #88	; 0x58
 800357c:	f000 80a4 	beq.w	80036c8 <_printf_i+0x170>
 8003580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003588:	e03a      	b.n	8003600 <_printf_i+0xa8>
 800358a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800358e:	2b15      	cmp	r3, #21
 8003590:	d8f6      	bhi.n	8003580 <_printf_i+0x28>
 8003592:	a001      	add	r0, pc, #4	; (adr r0, 8003598 <_printf_i+0x40>)
 8003594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003598:	080035f1 	.word	0x080035f1
 800359c:	08003605 	.word	0x08003605
 80035a0:	08003581 	.word	0x08003581
 80035a4:	08003581 	.word	0x08003581
 80035a8:	08003581 	.word	0x08003581
 80035ac:	08003581 	.word	0x08003581
 80035b0:	08003605 	.word	0x08003605
 80035b4:	08003581 	.word	0x08003581
 80035b8:	08003581 	.word	0x08003581
 80035bc:	08003581 	.word	0x08003581
 80035c0:	08003581 	.word	0x08003581
 80035c4:	08003713 	.word	0x08003713
 80035c8:	08003635 	.word	0x08003635
 80035cc:	080036f5 	.word	0x080036f5
 80035d0:	08003581 	.word	0x08003581
 80035d4:	08003581 	.word	0x08003581
 80035d8:	08003735 	.word	0x08003735
 80035dc:	08003581 	.word	0x08003581
 80035e0:	08003635 	.word	0x08003635
 80035e4:	08003581 	.word	0x08003581
 80035e8:	08003581 	.word	0x08003581
 80035ec:	080036fd 	.word	0x080036fd
 80035f0:	680b      	ldr	r3, [r1, #0]
 80035f2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035f6:	1d1a      	adds	r2, r3, #4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	600a      	str	r2, [r1, #0]
 80035fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003600:	2301      	movs	r3, #1
 8003602:	e0a4      	b.n	800374e <_printf_i+0x1f6>
 8003604:	6825      	ldr	r5, [r4, #0]
 8003606:	6808      	ldr	r0, [r1, #0]
 8003608:	062e      	lsls	r6, r5, #24
 800360a:	f100 0304 	add.w	r3, r0, #4
 800360e:	d50a      	bpl.n	8003626 <_printf_i+0xce>
 8003610:	6805      	ldr	r5, [r0, #0]
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	2d00      	cmp	r5, #0
 8003616:	da03      	bge.n	8003620 <_printf_i+0xc8>
 8003618:	232d      	movs	r3, #45	; 0x2d
 800361a:	426d      	negs	r5, r5
 800361c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003620:	230a      	movs	r3, #10
 8003622:	485e      	ldr	r0, [pc, #376]	; (800379c <_printf_i+0x244>)
 8003624:	e019      	b.n	800365a <_printf_i+0x102>
 8003626:	f015 0f40 	tst.w	r5, #64	; 0x40
 800362a:	6805      	ldr	r5, [r0, #0]
 800362c:	600b      	str	r3, [r1, #0]
 800362e:	bf18      	it	ne
 8003630:	b22d      	sxthne	r5, r5
 8003632:	e7ef      	b.n	8003614 <_printf_i+0xbc>
 8003634:	680b      	ldr	r3, [r1, #0]
 8003636:	6825      	ldr	r5, [r4, #0]
 8003638:	1d18      	adds	r0, r3, #4
 800363a:	6008      	str	r0, [r1, #0]
 800363c:	0628      	lsls	r0, r5, #24
 800363e:	d501      	bpl.n	8003644 <_printf_i+0xec>
 8003640:	681d      	ldr	r5, [r3, #0]
 8003642:	e002      	b.n	800364a <_printf_i+0xf2>
 8003644:	0669      	lsls	r1, r5, #25
 8003646:	d5fb      	bpl.n	8003640 <_printf_i+0xe8>
 8003648:	881d      	ldrh	r5, [r3, #0]
 800364a:	2f6f      	cmp	r7, #111	; 0x6f
 800364c:	bf0c      	ite	eq
 800364e:	2308      	moveq	r3, #8
 8003650:	230a      	movne	r3, #10
 8003652:	4852      	ldr	r0, [pc, #328]	; (800379c <_printf_i+0x244>)
 8003654:	2100      	movs	r1, #0
 8003656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800365a:	6866      	ldr	r6, [r4, #4]
 800365c:	2e00      	cmp	r6, #0
 800365e:	bfa8      	it	ge
 8003660:	6821      	ldrge	r1, [r4, #0]
 8003662:	60a6      	str	r6, [r4, #8]
 8003664:	bfa4      	itt	ge
 8003666:	f021 0104 	bicge.w	r1, r1, #4
 800366a:	6021      	strge	r1, [r4, #0]
 800366c:	b90d      	cbnz	r5, 8003672 <_printf_i+0x11a>
 800366e:	2e00      	cmp	r6, #0
 8003670:	d04d      	beq.n	800370e <_printf_i+0x1b6>
 8003672:	4616      	mov	r6, r2
 8003674:	fbb5 f1f3 	udiv	r1, r5, r3
 8003678:	fb03 5711 	mls	r7, r3, r1, r5
 800367c:	5dc7      	ldrb	r7, [r0, r7]
 800367e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003682:	462f      	mov	r7, r5
 8003684:	42bb      	cmp	r3, r7
 8003686:	460d      	mov	r5, r1
 8003688:	d9f4      	bls.n	8003674 <_printf_i+0x11c>
 800368a:	2b08      	cmp	r3, #8
 800368c:	d10b      	bne.n	80036a6 <_printf_i+0x14e>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	07df      	lsls	r7, r3, #31
 8003692:	d508      	bpl.n	80036a6 <_printf_i+0x14e>
 8003694:	6923      	ldr	r3, [r4, #16]
 8003696:	6861      	ldr	r1, [r4, #4]
 8003698:	4299      	cmp	r1, r3
 800369a:	bfde      	ittt	le
 800369c:	2330      	movle	r3, #48	; 0x30
 800369e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036a6:	1b92      	subs	r2, r2, r6
 80036a8:	6122      	str	r2, [r4, #16]
 80036aa:	464b      	mov	r3, r9
 80036ac:	4621      	mov	r1, r4
 80036ae:	4640      	mov	r0, r8
 80036b0:	f8cd a000 	str.w	sl, [sp]
 80036b4:	aa03      	add	r2, sp, #12
 80036b6:	f7ff fedf 	bl	8003478 <_printf_common>
 80036ba:	3001      	adds	r0, #1
 80036bc:	d14c      	bne.n	8003758 <_printf_i+0x200>
 80036be:	f04f 30ff 	mov.w	r0, #4294967295
 80036c2:	b004      	add	sp, #16
 80036c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c8:	4834      	ldr	r0, [pc, #208]	; (800379c <_printf_i+0x244>)
 80036ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036ce:	680e      	ldr	r6, [r1, #0]
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80036d6:	061f      	lsls	r7, r3, #24
 80036d8:	600e      	str	r6, [r1, #0]
 80036da:	d514      	bpl.n	8003706 <_printf_i+0x1ae>
 80036dc:	07d9      	lsls	r1, r3, #31
 80036de:	bf44      	itt	mi
 80036e0:	f043 0320 	orrmi.w	r3, r3, #32
 80036e4:	6023      	strmi	r3, [r4, #0]
 80036e6:	b91d      	cbnz	r5, 80036f0 <_printf_i+0x198>
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	f023 0320 	bic.w	r3, r3, #32
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	2310      	movs	r3, #16
 80036f2:	e7af      	b.n	8003654 <_printf_i+0xfc>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	f043 0320 	orr.w	r3, r3, #32
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	2378      	movs	r3, #120	; 0x78
 80036fe:	4828      	ldr	r0, [pc, #160]	; (80037a0 <_printf_i+0x248>)
 8003700:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003704:	e7e3      	b.n	80036ce <_printf_i+0x176>
 8003706:	065e      	lsls	r6, r3, #25
 8003708:	bf48      	it	mi
 800370a:	b2ad      	uxthmi	r5, r5
 800370c:	e7e6      	b.n	80036dc <_printf_i+0x184>
 800370e:	4616      	mov	r6, r2
 8003710:	e7bb      	b.n	800368a <_printf_i+0x132>
 8003712:	680b      	ldr	r3, [r1, #0]
 8003714:	6826      	ldr	r6, [r4, #0]
 8003716:	1d1d      	adds	r5, r3, #4
 8003718:	6960      	ldr	r0, [r4, #20]
 800371a:	600d      	str	r5, [r1, #0]
 800371c:	0635      	lsls	r5, r6, #24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	d501      	bpl.n	8003726 <_printf_i+0x1ce>
 8003722:	6018      	str	r0, [r3, #0]
 8003724:	e002      	b.n	800372c <_printf_i+0x1d4>
 8003726:	0671      	lsls	r1, r6, #25
 8003728:	d5fb      	bpl.n	8003722 <_printf_i+0x1ca>
 800372a:	8018      	strh	r0, [r3, #0]
 800372c:	2300      	movs	r3, #0
 800372e:	4616      	mov	r6, r2
 8003730:	6123      	str	r3, [r4, #16]
 8003732:	e7ba      	b.n	80036aa <_printf_i+0x152>
 8003734:	680b      	ldr	r3, [r1, #0]
 8003736:	1d1a      	adds	r2, r3, #4
 8003738:	600a      	str	r2, [r1, #0]
 800373a:	681e      	ldr	r6, [r3, #0]
 800373c:	2100      	movs	r1, #0
 800373e:	4630      	mov	r0, r6
 8003740:	6862      	ldr	r2, [r4, #4]
 8003742:	f000 f82f 	bl	80037a4 <memchr>
 8003746:	b108      	cbz	r0, 800374c <_printf_i+0x1f4>
 8003748:	1b80      	subs	r0, r0, r6
 800374a:	6060      	str	r0, [r4, #4]
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	6123      	str	r3, [r4, #16]
 8003750:	2300      	movs	r3, #0
 8003752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003756:	e7a8      	b.n	80036aa <_printf_i+0x152>
 8003758:	4632      	mov	r2, r6
 800375a:	4649      	mov	r1, r9
 800375c:	4640      	mov	r0, r8
 800375e:	6923      	ldr	r3, [r4, #16]
 8003760:	47d0      	blx	sl
 8003762:	3001      	adds	r0, #1
 8003764:	d0ab      	beq.n	80036be <_printf_i+0x166>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	079b      	lsls	r3, r3, #30
 800376a:	d413      	bmi.n	8003794 <_printf_i+0x23c>
 800376c:	68e0      	ldr	r0, [r4, #12]
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	4298      	cmp	r0, r3
 8003772:	bfb8      	it	lt
 8003774:	4618      	movlt	r0, r3
 8003776:	e7a4      	b.n	80036c2 <_printf_i+0x16a>
 8003778:	2301      	movs	r3, #1
 800377a:	4632      	mov	r2, r6
 800377c:	4649      	mov	r1, r9
 800377e:	4640      	mov	r0, r8
 8003780:	47d0      	blx	sl
 8003782:	3001      	adds	r0, #1
 8003784:	d09b      	beq.n	80036be <_printf_i+0x166>
 8003786:	3501      	adds	r5, #1
 8003788:	68e3      	ldr	r3, [r4, #12]
 800378a:	9903      	ldr	r1, [sp, #12]
 800378c:	1a5b      	subs	r3, r3, r1
 800378e:	42ab      	cmp	r3, r5
 8003790:	dcf2      	bgt.n	8003778 <_printf_i+0x220>
 8003792:	e7eb      	b.n	800376c <_printf_i+0x214>
 8003794:	2500      	movs	r5, #0
 8003796:	f104 0619 	add.w	r6, r4, #25
 800379a:	e7f5      	b.n	8003788 <_printf_i+0x230>
 800379c:	0800fab9 	.word	0x0800fab9
 80037a0:	0800faca 	.word	0x0800faca

080037a4 <memchr>:
 80037a4:	4603      	mov	r3, r0
 80037a6:	b510      	push	{r4, lr}
 80037a8:	b2c9      	uxtb	r1, r1
 80037aa:	4402      	add	r2, r0
 80037ac:	4293      	cmp	r3, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	d101      	bne.n	80037b6 <memchr+0x12>
 80037b2:	2000      	movs	r0, #0
 80037b4:	e003      	b.n	80037be <memchr+0x1a>
 80037b6:	7804      	ldrb	r4, [r0, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	428c      	cmp	r4, r1
 80037bc:	d1f6      	bne.n	80037ac <memchr+0x8>
 80037be:	bd10      	pop	{r4, pc}

080037c0 <memcpy>:
 80037c0:	440a      	add	r2, r1
 80037c2:	4291      	cmp	r1, r2
 80037c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c8:	d100      	bne.n	80037cc <memcpy+0xc>
 80037ca:	4770      	bx	lr
 80037cc:	b510      	push	{r4, lr}
 80037ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037d2:	4291      	cmp	r1, r2
 80037d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d8:	d1f9      	bne.n	80037ce <memcpy+0xe>
 80037da:	bd10      	pop	{r4, pc}

080037dc <memmove>:
 80037dc:	4288      	cmp	r0, r1
 80037de:	b510      	push	{r4, lr}
 80037e0:	eb01 0402 	add.w	r4, r1, r2
 80037e4:	d902      	bls.n	80037ec <memmove+0x10>
 80037e6:	4284      	cmp	r4, r0
 80037e8:	4623      	mov	r3, r4
 80037ea:	d807      	bhi.n	80037fc <memmove+0x20>
 80037ec:	1e43      	subs	r3, r0, #1
 80037ee:	42a1      	cmp	r1, r4
 80037f0:	d008      	beq.n	8003804 <memmove+0x28>
 80037f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037fa:	e7f8      	b.n	80037ee <memmove+0x12>
 80037fc:	4601      	mov	r1, r0
 80037fe:	4402      	add	r2, r0
 8003800:	428a      	cmp	r2, r1
 8003802:	d100      	bne.n	8003806 <memmove+0x2a>
 8003804:	bd10      	pop	{r4, pc}
 8003806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800380a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800380e:	e7f7      	b.n	8003800 <memmove+0x24>

08003810 <_free_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4605      	mov	r5, r0
 8003814:	2900      	cmp	r1, #0
 8003816:	d043      	beq.n	80038a0 <_free_r+0x90>
 8003818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800381c:	1f0c      	subs	r4, r1, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	bfb8      	it	lt
 8003822:	18e4      	addlt	r4, r4, r3
 8003824:	f000 f8d0 	bl	80039c8 <__malloc_lock>
 8003828:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <_free_r+0x94>)
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	4610      	mov	r0, r2
 800382e:	b933      	cbnz	r3, 800383e <_free_r+0x2e>
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	6014      	str	r4, [r2, #0]
 8003834:	4628      	mov	r0, r5
 8003836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800383a:	f000 b8cb 	b.w	80039d4 <__malloc_unlock>
 800383e:	42a3      	cmp	r3, r4
 8003840:	d90a      	bls.n	8003858 <_free_r+0x48>
 8003842:	6821      	ldr	r1, [r4, #0]
 8003844:	1862      	adds	r2, r4, r1
 8003846:	4293      	cmp	r3, r2
 8003848:	bf01      	itttt	eq
 800384a:	681a      	ldreq	r2, [r3, #0]
 800384c:	685b      	ldreq	r3, [r3, #4]
 800384e:	1852      	addeq	r2, r2, r1
 8003850:	6022      	streq	r2, [r4, #0]
 8003852:	6063      	str	r3, [r4, #4]
 8003854:	6004      	str	r4, [r0, #0]
 8003856:	e7ed      	b.n	8003834 <_free_r+0x24>
 8003858:	461a      	mov	r2, r3
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	b10b      	cbz	r3, 8003862 <_free_r+0x52>
 800385e:	42a3      	cmp	r3, r4
 8003860:	d9fa      	bls.n	8003858 <_free_r+0x48>
 8003862:	6811      	ldr	r1, [r2, #0]
 8003864:	1850      	adds	r0, r2, r1
 8003866:	42a0      	cmp	r0, r4
 8003868:	d10b      	bne.n	8003882 <_free_r+0x72>
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	4401      	add	r1, r0
 800386e:	1850      	adds	r0, r2, r1
 8003870:	4283      	cmp	r3, r0
 8003872:	6011      	str	r1, [r2, #0]
 8003874:	d1de      	bne.n	8003834 <_free_r+0x24>
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4401      	add	r1, r0
 800387c:	6011      	str	r1, [r2, #0]
 800387e:	6053      	str	r3, [r2, #4]
 8003880:	e7d8      	b.n	8003834 <_free_r+0x24>
 8003882:	d902      	bls.n	800388a <_free_r+0x7a>
 8003884:	230c      	movs	r3, #12
 8003886:	602b      	str	r3, [r5, #0]
 8003888:	e7d4      	b.n	8003834 <_free_r+0x24>
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	1821      	adds	r1, r4, r0
 800388e:	428b      	cmp	r3, r1
 8003890:	bf01      	itttt	eq
 8003892:	6819      	ldreq	r1, [r3, #0]
 8003894:	685b      	ldreq	r3, [r3, #4]
 8003896:	1809      	addeq	r1, r1, r0
 8003898:	6021      	streq	r1, [r4, #0]
 800389a:	6063      	str	r3, [r4, #4]
 800389c:	6054      	str	r4, [r2, #4]
 800389e:	e7c9      	b.n	8003834 <_free_r+0x24>
 80038a0:	bd38      	pop	{r3, r4, r5, pc}
 80038a2:	bf00      	nop
 80038a4:	200000ac 	.word	0x200000ac

080038a8 <_malloc_r>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	1ccd      	adds	r5, r1, #3
 80038ac:	f025 0503 	bic.w	r5, r5, #3
 80038b0:	3508      	adds	r5, #8
 80038b2:	2d0c      	cmp	r5, #12
 80038b4:	bf38      	it	cc
 80038b6:	250c      	movcc	r5, #12
 80038b8:	2d00      	cmp	r5, #0
 80038ba:	4606      	mov	r6, r0
 80038bc:	db01      	blt.n	80038c2 <_malloc_r+0x1a>
 80038be:	42a9      	cmp	r1, r5
 80038c0:	d903      	bls.n	80038ca <_malloc_r+0x22>
 80038c2:	230c      	movs	r3, #12
 80038c4:	6033      	str	r3, [r6, #0]
 80038c6:	2000      	movs	r0, #0
 80038c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ca:	f000 f87d 	bl	80039c8 <__malloc_lock>
 80038ce:	4921      	ldr	r1, [pc, #132]	; (8003954 <_malloc_r+0xac>)
 80038d0:	680a      	ldr	r2, [r1, #0]
 80038d2:	4614      	mov	r4, r2
 80038d4:	b99c      	cbnz	r4, 80038fe <_malloc_r+0x56>
 80038d6:	4f20      	ldr	r7, [pc, #128]	; (8003958 <_malloc_r+0xb0>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b923      	cbnz	r3, 80038e6 <_malloc_r+0x3e>
 80038dc:	4621      	mov	r1, r4
 80038de:	4630      	mov	r0, r6
 80038e0:	f000 f862 	bl	80039a8 <_sbrk_r>
 80038e4:	6038      	str	r0, [r7, #0]
 80038e6:	4629      	mov	r1, r5
 80038e8:	4630      	mov	r0, r6
 80038ea:	f000 f85d 	bl	80039a8 <_sbrk_r>
 80038ee:	1c43      	adds	r3, r0, #1
 80038f0:	d123      	bne.n	800393a <_malloc_r+0x92>
 80038f2:	230c      	movs	r3, #12
 80038f4:	4630      	mov	r0, r6
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	f000 f86c 	bl	80039d4 <__malloc_unlock>
 80038fc:	e7e3      	b.n	80038c6 <_malloc_r+0x1e>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	1b5b      	subs	r3, r3, r5
 8003902:	d417      	bmi.n	8003934 <_malloc_r+0x8c>
 8003904:	2b0b      	cmp	r3, #11
 8003906:	d903      	bls.n	8003910 <_malloc_r+0x68>
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	441c      	add	r4, r3
 800390c:	6025      	str	r5, [r4, #0]
 800390e:	e004      	b.n	800391a <_malloc_r+0x72>
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	42a2      	cmp	r2, r4
 8003914:	bf0c      	ite	eq
 8003916:	600b      	streq	r3, [r1, #0]
 8003918:	6053      	strne	r3, [r2, #4]
 800391a:	4630      	mov	r0, r6
 800391c:	f000 f85a 	bl	80039d4 <__malloc_unlock>
 8003920:	f104 000b 	add.w	r0, r4, #11
 8003924:	1d23      	adds	r3, r4, #4
 8003926:	f020 0007 	bic.w	r0, r0, #7
 800392a:	1ac2      	subs	r2, r0, r3
 800392c:	d0cc      	beq.n	80038c8 <_malloc_r+0x20>
 800392e:	1a1b      	subs	r3, r3, r0
 8003930:	50a3      	str	r3, [r4, r2]
 8003932:	e7c9      	b.n	80038c8 <_malloc_r+0x20>
 8003934:	4622      	mov	r2, r4
 8003936:	6864      	ldr	r4, [r4, #4]
 8003938:	e7cc      	b.n	80038d4 <_malloc_r+0x2c>
 800393a:	1cc4      	adds	r4, r0, #3
 800393c:	f024 0403 	bic.w	r4, r4, #3
 8003940:	42a0      	cmp	r0, r4
 8003942:	d0e3      	beq.n	800390c <_malloc_r+0x64>
 8003944:	1a21      	subs	r1, r4, r0
 8003946:	4630      	mov	r0, r6
 8003948:	f000 f82e 	bl	80039a8 <_sbrk_r>
 800394c:	3001      	adds	r0, #1
 800394e:	d1dd      	bne.n	800390c <_malloc_r+0x64>
 8003950:	e7cf      	b.n	80038f2 <_malloc_r+0x4a>
 8003952:	bf00      	nop
 8003954:	200000ac 	.word	0x200000ac
 8003958:	200000b0 	.word	0x200000b0

0800395c <_realloc_r>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	4607      	mov	r7, r0
 8003960:	4614      	mov	r4, r2
 8003962:	460e      	mov	r6, r1
 8003964:	b921      	cbnz	r1, 8003970 <_realloc_r+0x14>
 8003966:	4611      	mov	r1, r2
 8003968:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800396c:	f7ff bf9c 	b.w	80038a8 <_malloc_r>
 8003970:	b922      	cbnz	r2, 800397c <_realloc_r+0x20>
 8003972:	f7ff ff4d 	bl	8003810 <_free_r>
 8003976:	4625      	mov	r5, r4
 8003978:	4628      	mov	r0, r5
 800397a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800397c:	f000 f830 	bl	80039e0 <_malloc_usable_size_r>
 8003980:	42a0      	cmp	r0, r4
 8003982:	d20f      	bcs.n	80039a4 <_realloc_r+0x48>
 8003984:	4621      	mov	r1, r4
 8003986:	4638      	mov	r0, r7
 8003988:	f7ff ff8e 	bl	80038a8 <_malloc_r>
 800398c:	4605      	mov	r5, r0
 800398e:	2800      	cmp	r0, #0
 8003990:	d0f2      	beq.n	8003978 <_realloc_r+0x1c>
 8003992:	4631      	mov	r1, r6
 8003994:	4622      	mov	r2, r4
 8003996:	f7ff ff13 	bl	80037c0 <memcpy>
 800399a:	4631      	mov	r1, r6
 800399c:	4638      	mov	r0, r7
 800399e:	f7ff ff37 	bl	8003810 <_free_r>
 80039a2:	e7e9      	b.n	8003978 <_realloc_r+0x1c>
 80039a4:	4635      	mov	r5, r6
 80039a6:	e7e7      	b.n	8003978 <_realloc_r+0x1c>

080039a8 <_sbrk_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	2300      	movs	r3, #0
 80039ac:	4d05      	ldr	r5, [pc, #20]	; (80039c4 <_sbrk_r+0x1c>)
 80039ae:	4604      	mov	r4, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	602b      	str	r3, [r5, #0]
 80039b4:	f7fd ff1a 	bl	80017ec <_sbrk>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_sbrk_r+0x1a>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_sbrk_r+0x1a>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	200003bc 	.word	0x200003bc

080039c8 <__malloc_lock>:
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <__malloc_lock+0x8>)
 80039ca:	f000 b811 	b.w	80039f0 <__retarget_lock_acquire_recursive>
 80039ce:	bf00      	nop
 80039d0:	200003c4 	.word	0x200003c4

080039d4 <__malloc_unlock>:
 80039d4:	4801      	ldr	r0, [pc, #4]	; (80039dc <__malloc_unlock+0x8>)
 80039d6:	f000 b80c 	b.w	80039f2 <__retarget_lock_release_recursive>
 80039da:	bf00      	nop
 80039dc:	200003c4 	.word	0x200003c4

080039e0 <_malloc_usable_size_r>:
 80039e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e4:	1f18      	subs	r0, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfbc      	itt	lt
 80039ea:	580b      	ldrlt	r3, [r1, r0]
 80039ec:	18c0      	addlt	r0, r0, r3
 80039ee:	4770      	bx	lr

080039f0 <__retarget_lock_acquire_recursive>:
 80039f0:	4770      	bx	lr

080039f2 <__retarget_lock_release_recursive>:
 80039f2:	4770      	bx	lr

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
